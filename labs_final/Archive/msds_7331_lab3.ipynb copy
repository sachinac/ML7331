{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font size=6> <b> SMU Lab Three - MSDS7331 - Machine Learning-1 </b> </font>\n",
    "\n",
    "<font size=5> <b> Summer 2020 Group - Sachin, Ikenna, Edgar, Dustin </b></font> \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "<img src=\"https://github.com/sachinac/ML7331/blob/master/data/maxresdefault.png?raw=true\"> \n",
    "\n",
    "<p align=\"center\"><font size=5> <b> Movie Recommender System  </b></font> </p>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc": true
   },
   "source": [
    "<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Import-Libraries\" data-toc-modified-id=\"Import-Libraries-1\">Import Libraries</a></span></li><li><span><a href=\"#Introduction\" data-toc-modified-id=\"Introduction-2\">Introduction</a></span></li><li><span><a href=\"#Business-Understanding\" data-toc-modified-id=\"Business-Understanding-3\">Business Understanding</a></span></li><li><span><a href=\"#Data-Understanding-1---First-Impressions\" data-toc-modified-id=\"Data-Understanding-1---First-Impressions-4\">Data Understanding 1 - First Impressions</a></span><ul class=\"toc-item\"><li><span><a href=\"#Downloading-the-data:\" data-toc-modified-id=\"Downloading-the-data:-4.1\">Downloading the data:</a></span></li><li><span><a href=\"#Movie-Credits\" data-toc-modified-id=\"Movie-Credits-4.2\">Movie Credits</a></span></li><li><span><a href=\"#Movie-Keywords\" data-toc-modified-id=\"Movie-Keywords-4.3\">Movie Keywords</a></span></li><li><span><a href=\"#Movie-Metadata\" data-toc-modified-id=\"Movie-Metadata-4.4\">Movie Metadata</a></span></li><li><span><a href=\"#Movie-Ratings\" data-toc-modified-id=\"Movie-Ratings-4.5\">Movie Ratings</a></span></li></ul></li><li><span><a href=\"#Data-Understanding-2---Visualization\" data-toc-modified-id=\"Data-Understanding-2---Visualization-5\">Data Understanding 2 - Visualization</a></span><ul class=\"toc-item\"><li><span><a href=\"#Top-10-Stats:\" data-toc-modified-id=\"Top-10-Stats:-5.1\">Top 10 Stats:</a></span></li></ul></li><li><span><a href=\"#Modeling-and-Evaluation-1\" data-toc-modified-id=\"Modeling-and-Evaluation-1-6\">Modeling and Evaluation 1</a></span><ul class=\"toc-item\"><li><span><a href=\"#Basic-Explicit-Model-(user-item)\" data-toc-modified-id=\"Basic-Explicit-Model-(user-item)-6.1\">Basic Explicit Model (user-item)</a></span></li></ul></li><li><span><a href=\"#Modeling-and-Evaluation-2\" data-toc-modified-id=\"Modeling-and-Evaluation-2-7\">Modeling and Evaluation 2</a></span></li><li><span><a href=\"#Modeling-and-Evaluation-3\" data-toc-modified-id=\"Modeling-and-Evaluation-3-8\">Modeling and Evaluation 3</a></span></li><li><span><a href=\"#Modeling-and-Evaluation-4\" data-toc-modified-id=\"Modeling-and-Evaluation-4-9\">Modeling and Evaluation 4</a></span></li><li><span><a href=\"#Deployment\" data-toc-modified-id=\"Deployment-10\">Deployment</a></span></li><li><span><a href=\"#Exceptional-Work\" data-toc-modified-id=\"Exceptional-Work-11\">Exceptional Work</a></span></li><li><span><a href=\"#References\" data-toc-modified-id=\"References-12\">References</a></span></li></ul></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-08-07T00:10:24.563500Z",
     "start_time": "2020-08-07T00:10:24.459072Z"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import turicreate as tc\n",
    "import ast\n",
    "import wget\n",
    "import zipfile\n",
    "import os\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from IPython.display import HTML, display\n",
    "from sklearn.preprocessing import MultiLabelBinarizer\n",
    "from wordcloud import WordCloud, STOPWORDS\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg\n",
    "\n",
    "timebreak = '\\n\\n----------------------------------------------------\\nCell Processing Time'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<i> \"A recommender system calculates and provides relevant content to the user based on knowledge of the user, content, and interactions between the user and the item.\" </i> - Practical Recommeder Systems by Kim Falk \n",
    "\n",
    "<b> What are recommender Systems ? </b>\n",
    "\n",
    "Systems that are designed to predict user's interests and recommend product items that are likely interesting for them. These are most powerful system particularly for online retailers to boost sales. E-commerce and retail companies are leveraging power of data and boosting sales by implementing recommender systems on their websites. The use cases of these systems have been steadily increasing within the last few years.\n",
    "\n",
    "Companies like Amazon, Netflix, Linkedin, and Pandora leverage recommender systems to help users discover new and relevant items (products, videos, jobs, music), creating a delightful user experience while driving incremental revenue. The purpose of recommender systems is to tempt/persuade customer to buy a product/service by providing relevant information that interest to them right at their fingretips.\n",
    "\n",
    "Recommendations typically speed up searches and make it easier for users to access content they’re interested in, and surprise them with offers they would have never searched for.\n",
    "\n",
    "What is more, companies are able to gain and retain customers by sending out emails with links to new offers that meet the recipients’ interests, or suggestions of films and TV shows that suit their profiles.The user starts to feel known and understood and is more likely to buy additional products or consume more content. By knowing what a user wants, the company gains competitive advantage and the threat of losing a customer to a competitor decreases.\n",
    "\n",
    "Providing that added value to users by including recommendations in systems and products is appealing. Furthermore, it allows companies to position ahead of their competitors and eventually increase their earnings.\n",
    "\n",
    "Various types of recommendations systems are depcited in below diagram.<br><br>\n",
    "\n",
    "  <div class=\"image1\" align=\"center\">\n",
    "  <img src=\"https://d1m75rqqgidzqn.cloudfront.net/wp-data/2019/11/19121357/types-of-recommendation-systember.jpg\" width=\"400\" height=\"300\" alt=\"Screen 1\"/>\n",
    "    <a href=\"https://d1m75rqqgidzqn.cloudfront.net/wp-data/2019/11/19121357/types-of-recommendation-systember.jpg\"> \n",
    "        Image Source </a>\n",
    "  </div>\n",
    "  \n",
    "\n",
    "For this assignment we will focus on user based and item based system which are based on nearest neighbour.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Business Understanding\n",
    "%%html\n",
    "<style>\n",
    "div.image-gallery {\n",
    "  display: block;\n",
    "  background-color: #cccccc;\n",
    "}\n",
    "\n",
    "div.image-gallery img {\n",
    "  display: block;\n",
    "  float: left;\n",
    "}\n",
    "\n",
    ".clear {\n",
    "  clear: both;\n",
    "  height: 0;\n",
    "  width: 0;\n",
    "  font-size: 1px;\n",
    "  line-height: 0;\n",
    "}\n",
    "</style>\n",
    "\n",
    "In this notebook we aim to build movie recommendations system using Apple's <a href=\"https://apple.github.io/turicreate/docs/userguide/recommender/\"> Turicreate </a> package.The system that we are going to build will go a but deeper than traditional grouplens movie ratings dataset.In this notebook, we will be utilizing the popular movies dataset comprised of 26 million movie ratings from the GroupLens website, but with additional augmented data from TMDB which provides details including more detailed movie metadata such as: cast, crew, budget, country, revenue, languages and plot keywords on approximately 45,000 movies released prior to August 2017.\n",
    "\n",
    "We will explore various methods for recommending movies to users based on content based and collaborative filtering methods. <b> Because movie taste is highly subjective, it may prove difficult to measure the effectiveness of our algorithms, but we will capture Root Mean Square Errored (RMSE) to compare predicted vs actual ratings for items.</b> We will also look at precision and recall for per-user and per-item metrics, as well as calculating metrics in different ways such as by genre or country or origin.\n",
    "\n",
    "Here is general overview movie recommender system.\n",
    "\n",
    "In general recommendation systems consist of following components\n",
    "\n",
    "<b>1) Candidate generation </b><br><br>\n",
    "    Starts from potentially huge corpus to smaller subset of candidates. e.g Candidate generator in youtube reduces \n",
    "    billions of videos to hundred or thousands<br><br>\n",
    "    \n",
    "Following table shows two common candidate generation approaches.\n",
    "    \n",
    "<table>\n",
    "  <tr>\n",
    "    <th  align=\"left\">Type </th>\n",
    "    <th  align=\"left\">Definition</th>\n",
    "    <th  align=\"left\">Example</th>\n",
    "  </tr>\n",
    "  <tr>\n",
    "    <td>content-based filtering</td>\n",
    "    <td>Uses similarity between items to recommend items similar to what the user likes.</td>\n",
    "    <td>If user A watches two cute cat videos, then the system can recommend cute animal videos to that user.</td>\n",
    "  </tr>\n",
    "  <tr>\n",
    "    <td>collaborative filtering</td>\n",
    "    <td>Uses similarities between queries and items simultaneously to provide recommendations</td>\n",
    "    <td>If user A is similar to user B, and user B likes video 1, then the system can recommend video 1 to user A (even if user A hasn’t seen any videos similar to video 1).</td>\n",
    "  </tr>\n",
    "</table>\n",
    "\n",
    "    \n",
    "<b> 2)  Scoring </b> <br> <br>\n",
    "Next, another model scores and ranks the candidates in order to select the set of items (on the order of 10) to display to the user. <br><br>\n",
    "\n",
    "<b>3) Re-Ranking</b><br><br>\n",
    "Finally, the system must take into account additional constraints for the final ranking. For example, the system removes items that the user explicitly disliked or boosts the score of fresher content. Re-ranking can also help ensure diversity, freshness, and fairness<br><br>\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "   \n",
    "<font size=4> <b> Content based filtering </b> </font>\n",
    "\n",
    "Content-based filtering uses item features (movie-metadata) to recommend other items similar to what the user likes, based on their previous actions or explicit feedback. Movie dataset that we have obtained contains only ratings as explicit feedback. There are no other user's action data available in this dataset.\n",
    "\n",
    "So this filter does not involve other users. It only recommends based on what particular user likes and recommends item with similar content. e.g If user A likes comedy and action movies and user B also likes comedy but never watched action movies,collborative filter will recommend action movies to user B based on common comedy movies and later it may turn out that User B also likes action movies and he gets more recommendations on this list. \n",
    "\n",
    "   \n",
    "\n",
    "\n",
    "<table>\n",
    "    <tr>\n",
    "  <td>\n",
    "    <img src=\"https://github.com/sachinac/ML7331/blob/master/data/content_based_filter.png?raw=true\" alt=\"Snow\" style=\"width:62%\">\n",
    "      <div align=\"center\"> Content-Based Filter </div>\n",
    "      <div align=\"center\"> Source : Google Images </div>\n",
    "    </td>\n",
    "  <td>\n",
    "    <img src=\"https://github.com/sachinac/ML7331/blob/master/data/collaborative_filter.png?raw=true\" alt=\"Forest\" style=\"width:50%\" align=\"center\">\n",
    "      <div align=\"center\"> Collaborative Filter </div>\n",
    "      <div align=\"center\"> Source : Google Images </div>\n",
    "  </td>\n",
    "</tr>\n",
    "</table>\n",
    "\n",
    "\n",
    "<font size=4> <b> Collaborative Filtering </b> </font>\n",
    "\n",
    "There are two types of collaborative filtering exist: <br>\n",
    "\n",
    "<b>User Based collaborative filtering </b><br>\n",
    "\n",
    "This type of filter is based on users’ ratings, and it will recommend movies that user hasn't watched yet, but users similar to us have, and like. To determine whether two users are similar or not, this filter considers the movies both of them watched and how they rated them. By looking at the items in common, this type of algorithm  predicts the rating of a movie for a user who hasn’t watched it yet, based on the similar users’ rating.\n",
    "\n",
    "One of the challenge for this type of filter to work accurately is that it requires user's ratings and in real sense not all users rate the movie they watched.Some of them never rate movie. That poses challege to build effective recommender.\n",
    "\n",
    "<b> Item based collaborative filtering </b><br>\n",
    "   \n",
    "This is another type of recommendation method which looks for similar items based on items users have already liked or consumed.Item-based collaborative filtering is a model-based algorithm for making recommendations. In the algorithm, the similarities between different items in the dataset are calculated by using one of a number of similarity measures, and then these similarity values are used to predict ratings for user-item pairs not present in the dataset. \n",
    "\n",
    "<b>Similarity Measures</b>\n",
    "\n",
    "There are a number of different mathematical formulations that can be used to calculate the similarity between two items. As can be seen in the formulae below, each formula includes terms summed over the set of common users U.\n",
    "\n",
    "We could divide Item-base collaborative filtering in two sub tasks:\n",
    "    \n",
    "1.Calculate similarity among the items:\n",
    "    \n",
    "* Cosine-Based Similarity\n",
    "* Correlation-Based Similarity\n",
    "* Adjusted Cosine Similarity\n",
    "* 1-Jaccard distance\n",
    "    \n",
    "2.Calculation of Prediction:\n",
    "* Weighted Sum\n",
    "* Regression\n",
    "    \n",
    "The difference between User-Based Collaborative Filtering and this method is that, in this case, we directly pre-calculate the similarity between the co-rated items, skipping K-neighborhood search\n",
    "\n",
    "Typically, there are very popular items that users interact with a lot and others that they don’t, which comprise what is known as the <font size=4 color=\"blue\">Long Tail</font>. Recommender systems usually work pretty well on popular items, although that’s probably not very interesting to users as they most likely already know about them. The items in the Long Tail are the most interesting ones, because they may not be considered by the user at all if they aren’t recommended.\n",
    "\n",
    "<img src=\"https://github.com/sachinac/ML7331/blob/master/data/content_based_filter.png?raw=true\" alt=\"Snow\" style=\"width:62%\">\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Understanding 1 - First Impressions\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Downloading the data:\n",
    "Because the unzipped data is ~ 900mb, we've saved it in an AWS S3 bucket as a zip file.  We've added the movies data directory to our *.gitignore* file so it doesn't get picked up in github.  This chunk of code does the following:\n",
    "* Check if the movie directory exists, create it if not, skip the step if so.  \n",
    "* Checks files in the directory against expected files, if not found, download the zip file from AWS, extracts and deletes the downloaded zip file, then cleans up created variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Movie files are present! \n",
      "\n",
      "----------------------------------------------------\n",
      "Cell Processing Time\n",
      "CPU times: user 985 µs, sys: 161 µs, total: 1.15 ms\n",
      "Wall time: 641 µs\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "movie_dir = './data/movies'\n",
    "movie_zipfile = movie_dir + '/movies.zip'\n",
    "expected_files = ['keywords.csv', 'credits.csv', 'ratings.csv', 'ratings_small.csv', 'links_small.csv', 'movies_metadata.csv', 'links.csv']\n",
    "movie_data = 'https://ml7331.s3.us-east-2.amazonaws.com/3405_6663_bundle_archive.zip'\n",
    "\n",
    "# If movie directory doesn't exist, create it\n",
    "if not os.path.isdir(movie_dir):\n",
    "    print('creating directory:', movie_dir)\n",
    "    os.mkdir(movie_dir)\n",
    "\n",
    "# If all expected files are not present, download a fresh copy of movie data:    \n",
    "if not all(files in os.listdir(movie_dir) for files in expected_files):\n",
    "    print('downloading files...')\n",
    "    wget.download(movie_data, movie_zipfile)\n",
    "    print('unzipping files...')\n",
    "    with zipfile.ZipFile(movie_zipfile, 'r') as zip_ref:\n",
    "        zip_ref.extractall(movie_dir)\n",
    "    os.remove(movie_zipfile)\n",
    "    \n",
    "del movie_data, movie_zipfile, movie_dir, expected_files\n",
    "print('Movie files are present!', timebreak)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 23.3 ms, sys: 607 µs, total: 23.9 ms\n",
      "Wall time: 28.4 ms\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>movieId</th>\n",
       "      <th>imdbId</th>\n",
       "      <th>tmdbId</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>114709</td>\n",
       "      <td>862.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>113497</td>\n",
       "      <td>8844.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>113228</td>\n",
       "      <td>15602.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>114885</td>\n",
       "      <td>31357.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>113041</td>\n",
       "      <td>11862.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9120</th>\n",
       "      <td>162672</td>\n",
       "      <td>3859980</td>\n",
       "      <td>402672.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9121</th>\n",
       "      <td>163056</td>\n",
       "      <td>4262980</td>\n",
       "      <td>315011.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9122</th>\n",
       "      <td>163949</td>\n",
       "      <td>2531318</td>\n",
       "      <td>391698.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9123</th>\n",
       "      <td>164977</td>\n",
       "      <td>27660</td>\n",
       "      <td>137608.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9124</th>\n",
       "      <td>164979</td>\n",
       "      <td>3447228</td>\n",
       "      <td>410803.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9125 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      movieId   imdbId    tmdbId\n",
       "0           1   114709     862.0\n",
       "1           2   113497    8844.0\n",
       "2           3   113228   15602.0\n",
       "3           4   114885   31357.0\n",
       "4           5   113041   11862.0\n",
       "...       ...      ...       ...\n",
       "9120   162672  3859980  402672.0\n",
       "9121   163056  4262980  315011.0\n",
       "9122   163949  2531318  391698.0\n",
       "9123   164977    27660  137608.0\n",
       "9124   164979  3447228  410803.0\n",
       "\n",
       "[9125 rows x 3 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "# Read in datasets\n",
    "#TODO: these should go in their own sections eventually\n",
    "links = pd.read_csv('./data/movies/links.csv')\n",
    "links_small = pd.read_csv('./data/movies/links_small.csv')\n",
    "\n",
    "links_small"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Movie Credits\n",
    "\n",
    "The credits dataset (found in /data/credits.csv) has a movie id column and provides two JSON objects stored as a string representing the crew and cast.  It uses single quotes for strings, except in cases where a single quote is used, these strings are wrapped in double quotes.  Well formed JSON expects strings to be wrapped in double quotes, so we'll write a little helper function using the *literal_eval* function from the Abstract Syntax Trees package.\n",
    "\n",
    "After parsing them as literal into a list object, we can pick out **directors, producers and actors**, which we think will be most important in influencing recommendations.  We'll save these as list objects which we can then merge into our movies dataset.\n",
    "\n",
    "We also discovered 44 duplicate entries in this file, which from a sample of random selections appear to be true duplicates and will be safely removed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Removed 44 duplicate rows.\n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 45011 entries, 0 to 45475\n",
      "Data columns (total 9 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   cast            45011 non-null  object\n",
      " 1   crew            45011 non-null  object\n",
      " 2   id              45011 non-null  int64 \n",
      " 3   directors       45011 non-null  object\n",
      " 4   producers       45011 non-null  object\n",
      " 5   actors          45011 non-null  object\n",
      " 6   actors_dict     45011 non-null  object\n",
      " 7   producers_dict  45011 non-null  object\n",
      " 8   directors_dict  45011 non-null  object\n",
      "dtypes: int64(1), object(8)\n",
      "memory usage: 3.4+ MB\n",
      "None \n",
      "\n",
      "----------------------------------------------------\n",
      "Cell Processing Time\n",
      "CPU times: user 40.6 s, sys: 127 ms, total: 40.7 s\n",
      "Wall time: 40.8 s\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cast</th>\n",
       "      <th>crew</th>\n",
       "      <th>id</th>\n",
       "      <th>directors</th>\n",
       "      <th>producers</th>\n",
       "      <th>actors</th>\n",
       "      <th>actors_dict</th>\n",
       "      <th>producers_dict</th>\n",
       "      <th>directors_dict</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[{'cast_id': 14, 'character': 'Woody (voice)',...</td>\n",
       "      <td>[{'credit_id': '52fe4284c3a36847f8024f49', 'de...</td>\n",
       "      <td>862</td>\n",
       "      <td>[John Lasseter, Ash Brannon, William Reeves, R...</td>\n",
       "      <td>[Bonnie Arnold, Ed Catmull, Ralph Guggenheim, ...</td>\n",
       "      <td>[Tom Hanks, Tim Allen, Don Rickles, Jim Varney...</td>\n",
       "      <td>{'Tom Hanks': 'name', 'Tim Allen': 'name', 'Do...</td>\n",
       "      <td>{'Bonnie Arnold': 'name', 'Ed Catmull': 'name'...</td>\n",
       "      <td>{'John Lasseter': 'name', 'Ash Brannon': 'name...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[{'cast_id': 1, 'character': 'Alan Parrish', '...</td>\n",
       "      <td>[{'credit_id': '52fe44bfc3a36847f80a7cd1', 'de...</td>\n",
       "      <td>8844</td>\n",
       "      <td>[Joe Johnston, Thomas E. Ackerman]</td>\n",
       "      <td>[Larry J. Franco, Scott Kroopf, Ted Field, Rob...</td>\n",
       "      <td>[Robin Williams, Jonathan Hyde, Kirsten Dunst,...</td>\n",
       "      <td>{'Robin Williams': 'name', 'Jonathan Hyde': 'n...</td>\n",
       "      <td>{'Larry J. Franco': 'name', 'Scott Kroopf': 'n...</td>\n",
       "      <td>{'Joe Johnston': 'name', 'Thomas E. Ackerman':...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[{'cast_id': 2, 'character': 'Max Goldman', 'c...</td>\n",
       "      <td>[{'credit_id': '52fe466a9251416c75077a89', 'de...</td>\n",
       "      <td>15602</td>\n",
       "      <td>[Howard Deutch]</td>\n",
       "      <td>[]</td>\n",
       "      <td>[Walter Matthau, Jack Lemmon, Ann-Margret, Sop...</td>\n",
       "      <td>{'Walter Matthau': 'name', 'Jack Lemmon': 'nam...</td>\n",
       "      <td>{}</td>\n",
       "      <td>{'Howard Deutch': 'name'}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[{'cast_id': 1, 'character': \"Savannah 'Vannah...</td>\n",
       "      <td>[{'credit_id': '52fe44779251416c91011acb', 'de...</td>\n",
       "      <td>31357</td>\n",
       "      <td>[Forest Whitaker]</td>\n",
       "      <td>[Ronald Bass, Ezra Swerdlow, Deborah Schindler...</td>\n",
       "      <td>[Whitney Houston, Angela Bassett, Loretta Devi...</td>\n",
       "      <td>{'Whitney Houston': 'name', 'Angela Bassett': ...</td>\n",
       "      <td>{'Ronald Bass': 'name', 'Ezra Swerdlow': 'name...</td>\n",
       "      <td>{'Forest Whitaker': 'name'}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[{'cast_id': 1, 'character': 'George Banks', '...</td>\n",
       "      <td>[{'credit_id': '52fe44959251416c75039ed7', 'de...</td>\n",
       "      <td>11862</td>\n",
       "      <td>[Elliot Davis, Charles Shyer]</td>\n",
       "      <td>[Nancy Meyers]</td>\n",
       "      <td>[Steve Martin, Diane Keaton, Martin Short, Kim...</td>\n",
       "      <td>{'Steve Martin': 'name', 'Diane Keaton': 'name...</td>\n",
       "      <td>{'Nancy Meyers': 'name'}</td>\n",
       "      <td>{'Elliot Davis': 'name', 'Charles Shyer': 'name'}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45471</th>\n",
       "      <td>[{'cast_id': 0, 'character': '', 'credit_id': ...</td>\n",
       "      <td>[{'credit_id': '5894a97d925141426c00818c', 'de...</td>\n",
       "      <td>439050</td>\n",
       "      <td>[Hamid Nematollah, Babak Ardalan]</td>\n",
       "      <td>[Hamid Nematollah]</td>\n",
       "      <td>[Leila Hatami, Kourosh Tahami, Elham Korda]</td>\n",
       "      <td>{'Leila Hatami': 'name', 'Kourosh Tahami': 'na...</td>\n",
       "      <td>{'Hamid Nematollah': 'name'}</td>\n",
       "      <td>{'Hamid Nematollah': 'name', 'Babak Ardalan': ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45472</th>\n",
       "      <td>[{'cast_id': 1002, 'character': 'Sister Angela...</td>\n",
       "      <td>[{'credit_id': '52fe4af1c3a36847f81e9b15', 'de...</td>\n",
       "      <td>111109</td>\n",
       "      <td>[Lav Diaz]</td>\n",
       "      <td>[]</td>\n",
       "      <td>[Angel Aquino, Perry Dizon, Hazel Orencio, Joe...</td>\n",
       "      <td>{'Angel Aquino': 'name', 'Perry Dizon': 'name'...</td>\n",
       "      <td>{}</td>\n",
       "      <td>{'Lav Diaz': 'name'}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45473</th>\n",
       "      <td>[{'cast_id': 6, 'character': 'Emily Shaw', 'cr...</td>\n",
       "      <td>[{'credit_id': '52fe4776c3a368484e0c8387', 'de...</td>\n",
       "      <td>67758</td>\n",
       "      <td>[Mark L. Lester, João Fernandes]</td>\n",
       "      <td>[]</td>\n",
       "      <td>[Erika Eleniak, Adam Baldwin, Julie du Page, J...</td>\n",
       "      <td>{'Erika Eleniak': 'name', 'Adam Baldwin': 'nam...</td>\n",
       "      <td>{}</td>\n",
       "      <td>{'Mark L. Lester': 'name', 'João Fernandes': '...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45474</th>\n",
       "      <td>[{'cast_id': 2, 'character': '', 'credit_id': ...</td>\n",
       "      <td>[{'credit_id': '533bccebc3a36844cf0011a7', 'de...</td>\n",
       "      <td>227506</td>\n",
       "      <td>[Yakov Protazanov]</td>\n",
       "      <td>[Joseph N. Ermolieff]</td>\n",
       "      <td>[Iwan Mosschuchin, Nathalie Lissenko, Pavel Pa...</td>\n",
       "      <td>{'Iwan Mosschuchin': 'name', 'Nathalie Lissenk...</td>\n",
       "      <td>{'Joseph N. Ermolieff': 'name'}</td>\n",
       "      <td>{'Yakov Protazanov': 'name'}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45475</th>\n",
       "      <td>[]</td>\n",
       "      <td>[{'credit_id': '593e676c92514105b702e68e', 'de...</td>\n",
       "      <td>461257</td>\n",
       "      <td>[Daisy Asquith]</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "      <td>{}</td>\n",
       "      <td>{}</td>\n",
       "      <td>{'Daisy Asquith': 'name'}</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>45011 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    cast  \\\n",
       "0      [{'cast_id': 14, 'character': 'Woody (voice)',...   \n",
       "1      [{'cast_id': 1, 'character': 'Alan Parrish', '...   \n",
       "2      [{'cast_id': 2, 'character': 'Max Goldman', 'c...   \n",
       "3      [{'cast_id': 1, 'character': \"Savannah 'Vannah...   \n",
       "4      [{'cast_id': 1, 'character': 'George Banks', '...   \n",
       "...                                                  ...   \n",
       "45471  [{'cast_id': 0, 'character': '', 'credit_id': ...   \n",
       "45472  [{'cast_id': 1002, 'character': 'Sister Angela...   \n",
       "45473  [{'cast_id': 6, 'character': 'Emily Shaw', 'cr...   \n",
       "45474  [{'cast_id': 2, 'character': '', 'credit_id': ...   \n",
       "45475                                                 []   \n",
       "\n",
       "                                                    crew      id  \\\n",
       "0      [{'credit_id': '52fe4284c3a36847f8024f49', 'de...     862   \n",
       "1      [{'credit_id': '52fe44bfc3a36847f80a7cd1', 'de...    8844   \n",
       "2      [{'credit_id': '52fe466a9251416c75077a89', 'de...   15602   \n",
       "3      [{'credit_id': '52fe44779251416c91011acb', 'de...   31357   \n",
       "4      [{'credit_id': '52fe44959251416c75039ed7', 'de...   11862   \n",
       "...                                                  ...     ...   \n",
       "45471  [{'credit_id': '5894a97d925141426c00818c', 'de...  439050   \n",
       "45472  [{'credit_id': '52fe4af1c3a36847f81e9b15', 'de...  111109   \n",
       "45473  [{'credit_id': '52fe4776c3a368484e0c8387', 'de...   67758   \n",
       "45474  [{'credit_id': '533bccebc3a36844cf0011a7', 'de...  227506   \n",
       "45475  [{'credit_id': '593e676c92514105b702e68e', 'de...  461257   \n",
       "\n",
       "                                               directors  \\\n",
       "0      [John Lasseter, Ash Brannon, William Reeves, R...   \n",
       "1                     [Joe Johnston, Thomas E. Ackerman]   \n",
       "2                                        [Howard Deutch]   \n",
       "3                                      [Forest Whitaker]   \n",
       "4                          [Elliot Davis, Charles Shyer]   \n",
       "...                                                  ...   \n",
       "45471                  [Hamid Nematollah, Babak Ardalan]   \n",
       "45472                                         [Lav Diaz]   \n",
       "45473                   [Mark L. Lester, João Fernandes]   \n",
       "45474                                 [Yakov Protazanov]   \n",
       "45475                                    [Daisy Asquith]   \n",
       "\n",
       "                                               producers  \\\n",
       "0      [Bonnie Arnold, Ed Catmull, Ralph Guggenheim, ...   \n",
       "1      [Larry J. Franco, Scott Kroopf, Ted Field, Rob...   \n",
       "2                                                     []   \n",
       "3      [Ronald Bass, Ezra Swerdlow, Deborah Schindler...   \n",
       "4                                         [Nancy Meyers]   \n",
       "...                                                  ...   \n",
       "45471                                 [Hamid Nematollah]   \n",
       "45472                                                 []   \n",
       "45473                                                 []   \n",
       "45474                              [Joseph N. Ermolieff]   \n",
       "45475                                                 []   \n",
       "\n",
       "                                                  actors  \\\n",
       "0      [Tom Hanks, Tim Allen, Don Rickles, Jim Varney...   \n",
       "1      [Robin Williams, Jonathan Hyde, Kirsten Dunst,...   \n",
       "2      [Walter Matthau, Jack Lemmon, Ann-Margret, Sop...   \n",
       "3      [Whitney Houston, Angela Bassett, Loretta Devi...   \n",
       "4      [Steve Martin, Diane Keaton, Martin Short, Kim...   \n",
       "...                                                  ...   \n",
       "45471        [Leila Hatami, Kourosh Tahami, Elham Korda]   \n",
       "45472  [Angel Aquino, Perry Dizon, Hazel Orencio, Joe...   \n",
       "45473  [Erika Eleniak, Adam Baldwin, Julie du Page, J...   \n",
       "45474  [Iwan Mosschuchin, Nathalie Lissenko, Pavel Pa...   \n",
       "45475                                                 []   \n",
       "\n",
       "                                             actors_dict  \\\n",
       "0      {'Tom Hanks': 'name', 'Tim Allen': 'name', 'Do...   \n",
       "1      {'Robin Williams': 'name', 'Jonathan Hyde': 'n...   \n",
       "2      {'Walter Matthau': 'name', 'Jack Lemmon': 'nam...   \n",
       "3      {'Whitney Houston': 'name', 'Angela Bassett': ...   \n",
       "4      {'Steve Martin': 'name', 'Diane Keaton': 'name...   \n",
       "...                                                  ...   \n",
       "45471  {'Leila Hatami': 'name', 'Kourosh Tahami': 'na...   \n",
       "45472  {'Angel Aquino': 'name', 'Perry Dizon': 'name'...   \n",
       "45473  {'Erika Eleniak': 'name', 'Adam Baldwin': 'nam...   \n",
       "45474  {'Iwan Mosschuchin': 'name', 'Nathalie Lissenk...   \n",
       "45475                                                 {}   \n",
       "\n",
       "                                          producers_dict  \\\n",
       "0      {'Bonnie Arnold': 'name', 'Ed Catmull': 'name'...   \n",
       "1      {'Larry J. Franco': 'name', 'Scott Kroopf': 'n...   \n",
       "2                                                     {}   \n",
       "3      {'Ronald Bass': 'name', 'Ezra Swerdlow': 'name...   \n",
       "4                               {'Nancy Meyers': 'name'}   \n",
       "...                                                  ...   \n",
       "45471                       {'Hamid Nematollah': 'name'}   \n",
       "45472                                                 {}   \n",
       "45473                                                 {}   \n",
       "45474                    {'Joseph N. Ermolieff': 'name'}   \n",
       "45475                                                 {}   \n",
       "\n",
       "                                          directors_dict  \n",
       "0      {'John Lasseter': 'name', 'Ash Brannon': 'name...  \n",
       "1      {'Joe Johnston': 'name', 'Thomas E. Ackerman':...  \n",
       "2                              {'Howard Deutch': 'name'}  \n",
       "3                            {'Forest Whitaker': 'name'}  \n",
       "4      {'Elliot Davis': 'name', 'Charles Shyer': 'name'}  \n",
       "...                                                  ...  \n",
       "45471  {'Hamid Nematollah': 'name', 'Babak Ardalan': ...  \n",
       "45472                               {'Lav Diaz': 'name'}  \n",
       "45473  {'Mark L. Lester': 'name', 'João Fernandes': '...  \n",
       "45474                       {'Yakov Protazanov': 'name'}  \n",
       "45475                          {'Daisy Asquith': 'name'}  \n",
       "\n",
       "[45011 rows x 9 columns]"
      ]
     },
     "execution_count": 239,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "credits = pd.read_csv('./data/movies/credits.csv')\n",
    "\n",
    "# Drop rows where both cast and crew are empty\n",
    "credits = credits[~((credits['cast'].str.contains('\\[\\]')) & (credits['crew'].str.contains('\\[\\]')))]\n",
    "\n",
    "def dedupe(df):\n",
    "    dupes = len(df[df.duplicated(subset=['id'])])\n",
    "    print('Removed', dupes, 'duplicate rows.\\n')\n",
    "    return df[~df.duplicated(subset=['id'])]\n",
    "\n",
    "# Remove duplicates:\n",
    "credits = dedupe(credits)\n",
    "\n",
    "def get_credits(crew_json):\n",
    "    crew = ast.literal_eval(crew_json.crew)\n",
    "    cast = ast.literal_eval(crew_json.cast)\n",
    "    directors = []\n",
    "    producers = []\n",
    "    actors = []\n",
    "    for member in crew:\n",
    "#        if member is np.nan:\n",
    "#            member = '[]'\n",
    "        if 'Director' in member['job'] and member['job'] is not np.nan:\n",
    "            directors.append(member['name'])\n",
    "        if 'Producer' in member['job'] and member['job'] is not np.nan:\n",
    "            producers.append(member['name'])\n",
    "    for actor in cast:\n",
    "#        if actor is np.nan:\n",
    "#            actor = '[]'\n",
    "        if actor['name'] is not np.nan:\n",
    "            actors.append(actor['name'])\n",
    "\n",
    "    return  pd.Series([directors, producers, actors])\n",
    "\n",
    "credits[['directors','producers','actors']] = credits.apply(get_credits, axis=1)\n",
    "\n",
    "def make_dict(lst):\n",
    "    if lst is np.nan:\n",
    "        return np.nan\n",
    "    else:\n",
    "        return { i : 'name' for i in lst }\n",
    "        #return {i:lst[i] for i in range(0, len(lst))}\n",
    "\n",
    "credits['actors_dict'] = credits.actors.apply(make_dict)\n",
    "credits['producers_dict'] = credits.producers.apply(make_dict)\n",
    "credits['directors_dict'] = credits.directors.apply(make_dict)\n",
    "\n",
    "print(credits.info(),timebreak)\n",
    "\n",
    "credits\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Movie Keywords\n",
    "\n",
    "The keywords dataset (found in /data/keywords.csv) has a movie id column and again provides a JSON object stored as a string representing keywords which apply to each movie.  It uses single quotes for strings, except in cases where a single quote is used, these strings are wrapped in double quotes.  Well formed JSON expects strings to be wrapped in double quotes, so we'll utilize another helper function using the *literal_eval* function from the Abstract Syntax Trees package.\n",
    "\n",
    "After parsing them as literal into a list object, and removing empty list objects, we'll save these **plot keywords** as list object which we can merge into our movies dataset.\n",
    "\n",
    "There are 532 duplicate entries in this file which from a sample of random selections, again appear to be true duplicates and will be safely removed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Removed 532 duplicate rows.\n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 31092 entries, 0 to 46415\n",
      "Data columns (total 3 columns):\n",
      " #   Column        Non-Null Count  Dtype \n",
      "---  ------        --------------  ----- \n",
      " 0   id            31092 non-null  int64 \n",
      " 1   keywords      31092 non-null  object\n",
      " 2   keyword_json  31092 non-null  object\n",
      "dtypes: int64(1), object(2)\n",
      "memory usage: 971.6+ KB\n",
      "None \n",
      "\n",
      "----------------------------------------------------\n",
      "Cell Processing Time\n",
      "CPU times: user 1.42 s, sys: 29.7 ms, total: 1.45 s\n",
      "Wall time: 1.45 s\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>keywords</th>\n",
       "      <th>keyword_json</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>862</td>\n",
       "      <td>[jealousy, toy, boy, friendship, friends, riva...</td>\n",
       "      <td>[{'id': 931, 'name': 'jealousy'}, {'id': 4290,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8844</td>\n",
       "      <td>[board game, disappearance, based on children'...</td>\n",
       "      <td>[{'id': 10090, 'name': 'board game'}, {'id': 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>15602</td>\n",
       "      <td>[fishing, best friend, duringcreditsstinger, o...</td>\n",
       "      <td>[{'id': 1495, 'name': 'fishing'}, {'id': 12392...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>31357</td>\n",
       "      <td>[based on novel, interracial relationship, sin...</td>\n",
       "      <td>[{'id': 818, 'name': 'based on novel'}, {'id':...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11862</td>\n",
       "      <td>[baby, midlife crisis, confidence, aging, daug...</td>\n",
       "      <td>[{'id': 1009, 'name': 'baby'}, {'id': 1599, 'n...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46409</th>\n",
       "      <td>84419</td>\n",
       "      <td>[revenge, murder, serial killer, new york city...</td>\n",
       "      <td>[{'id': 9748, 'name': 'revenge'}, {'id': 9826,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46410</th>\n",
       "      <td>390959</td>\n",
       "      <td>[blair witch]</td>\n",
       "      <td>[{'id': 224180, 'name': 'blair witch'}]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46411</th>\n",
       "      <td>289923</td>\n",
       "      <td>[witch, mythology, legend, serial killer, mock...</td>\n",
       "      <td>[{'id': 616, 'name': 'witch'}, {'id': 2035, 'n...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46414</th>\n",
       "      <td>439050</td>\n",
       "      <td>[tragic love]</td>\n",
       "      <td>[{'id': 10703, 'name': 'tragic love'}]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46415</th>\n",
       "      <td>111109</td>\n",
       "      <td>[artist, play, pinoy]</td>\n",
       "      <td>[{'id': 2679, 'name': 'artist'}, {'id': 14531,...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>31092 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           id                                           keywords  \\\n",
       "0         862  [jealousy, toy, boy, friendship, friends, riva...   \n",
       "1        8844  [board game, disappearance, based on children'...   \n",
       "2       15602  [fishing, best friend, duringcreditsstinger, o...   \n",
       "3       31357  [based on novel, interracial relationship, sin...   \n",
       "4       11862  [baby, midlife crisis, confidence, aging, daug...   \n",
       "...       ...                                                ...   \n",
       "46409   84419  [revenge, murder, serial killer, new york city...   \n",
       "46410  390959                                      [blair witch]   \n",
       "46411  289923  [witch, mythology, legend, serial killer, mock...   \n",
       "46414  439050                                      [tragic love]   \n",
       "46415  111109                              [artist, play, pinoy]   \n",
       "\n",
       "                                            keyword_json  \n",
       "0      [{'id': 931, 'name': 'jealousy'}, {'id': 4290,...  \n",
       "1      [{'id': 10090, 'name': 'board game'}, {'id': 1...  \n",
       "2      [{'id': 1495, 'name': 'fishing'}, {'id': 12392...  \n",
       "3      [{'id': 818, 'name': 'based on novel'}, {'id':...  \n",
       "4      [{'id': 1009, 'name': 'baby'}, {'id': 1599, 'n...  \n",
       "...                                                  ...  \n",
       "46409  [{'id': 9748, 'name': 'revenge'}, {'id': 9826,...  \n",
       "46410            [{'id': 224180, 'name': 'blair witch'}]  \n",
       "46411  [{'id': 616, 'name': 'witch'}, {'id': 2035, 'n...  \n",
       "46414             [{'id': 10703, 'name': 'tragic love'}]  \n",
       "46415  [{'id': 2679, 'name': 'artist'}, {'id': 14531,...  \n",
       "\n",
       "[31092 rows x 3 columns]"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "keywords = pd.read_csv('./data/movies/keywords.csv')\n",
    "\n",
    "# Remove empty entries:\n",
    "keywords = keywords[~keywords['keywords'].str.contains('\\[\\]')]\n",
    "\n",
    "# Remove duplicates:\n",
    "keywords = dedupe(keywords)\n",
    "\n",
    "keywords['keyword_json'] = keywords['keywords'] \n",
    "\n",
    "# Breakout json into a list of names\n",
    "def get_keywords(keyword_list):\n",
    "    if keyword_list is np.nan:\n",
    "        return np.nan\n",
    "    kw = []\n",
    "    klist = ast.literal_eval(keyword_list)\n",
    "    for word in klist:\n",
    "        kw.append(word['name'])\n",
    "    return kw\n",
    "\n",
    "keywords['keywords'] = keywords.keyword_json.apply(get_keywords)\n",
    "\n",
    "print(keywords.info(),timebreak)\n",
    "\n",
    "keywords"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Movie Metadata\n",
    "\n",
    "\n",
    "\n",
    "The movies dataset (found in /data/movies_metadata.csv) has a movie id column and provides a lot of usable and JSON objects storing various metadata about each movie.  This dataset also appears to contain approximately 30 duplicate records, and after examining a sample of random selections, they appear to be true duplicates and will be safely removed.\n",
    "\n",
    "In this section we'll accomplish the following:  \n",
    "* There are three movies with improper ID values (1997-08-20,2012-09-29,2014-01-01), these items all appear to have incorrect formatting, so we'll drop these in order to merge the keyword and credits datasets and prevent future problems.\n",
    "* Merge directors, producers and actors from credits dataset\n",
    "* Merge keywords from keywords dataset\n",
    "* Clean up the movie collection by converting it to a string, as it appears to only contain one item per movie.\n",
    "* Convert the JSON genres object into a list of genres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Movies Shape:  (45466, 24) \n",
      "\n",
      "Removed 30 duplicate rows.\n",
      "\n",
      "Movies Shape after dropping bad data:  (45433, 24) \n",
      "\n",
      "Movies Shape after merging keywords:  (45433, 26) \n",
      "\n",
      "Movies Shape after merging credits:  (45433, 34) \n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 45433 entries, 0 to 45432\n",
      "Data columns (total 33 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   adult                  45433 non-null  object \n",
      " 1   belongs_to_collection  4488 non-null   object \n",
      " 2   budget                 45433 non-null  object \n",
      " 3   genres                 45433 non-null  object \n",
      " 4   homepage               7774 non-null   object \n",
      " 5   id                     45433 non-null  int64  \n",
      " 6   imdb_id                45416 non-null  object \n",
      " 7   original_language      45422 non-null  object \n",
      " 8   original_title         45433 non-null  object \n",
      " 9   overview               44479 non-null  object \n",
      " 10  popularity             45430 non-null  object \n",
      " 11  poster_path            45047 non-null  object \n",
      " 12  production_companies   45430 non-null  object \n",
      " 13  production_countries   45430 non-null  object \n",
      " 14  release_date           45346 non-null  object \n",
      " 15  revenue                45430 non-null  float64\n",
      " 16  runtime                45173 non-null  float64\n",
      " 17  spoken_languages       45430 non-null  object \n",
      " 18  status                 45349 non-null  object \n",
      " 19  tagline                20401 non-null  object \n",
      " 20  title                  45430 non-null  object \n",
      " 21  video                  45430 non-null  object \n",
      " 22  vote_average           45430 non-null  float64\n",
      " 23  vote_count             45430 non-null  float64\n",
      " 24  keywords               31092 non-null  object \n",
      " 25  directors              45011 non-null  object \n",
      " 26  producers              45011 non-null  object \n",
      " 27  actors                 45011 non-null  object \n",
      " 28  actors_dict            45011 non-null  object \n",
      " 29  producers_dict         45011 non-null  object \n",
      " 30  directors_dict         45011 non-null  object \n",
      " 31  genre_dict             45433 non-null  object \n",
      " 32  spoken_languages_dict  45430 non-null  object \n",
      "dtypes: float64(4), int64(1), object(28)\n",
      "memory usage: 11.8+ MB\n",
      "None \n",
      "\n",
      "----------------------------------------------------\n",
      "Cell Processing Time\n",
      "CPU times: user 2.44 s, sys: 3.41 ms, total: 2.44 s\n",
      "Wall time: 2.44 s\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>adult</th>\n",
       "      <th>belongs_to_collection</th>\n",
       "      <th>budget</th>\n",
       "      <th>genres</th>\n",
       "      <th>homepage</th>\n",
       "      <th>id</th>\n",
       "      <th>imdb_id</th>\n",
       "      <th>original_language</th>\n",
       "      <th>original_title</th>\n",
       "      <th>overview</th>\n",
       "      <th>...</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>keywords</th>\n",
       "      <th>directors</th>\n",
       "      <th>producers</th>\n",
       "      <th>actors</th>\n",
       "      <th>actors_dict</th>\n",
       "      <th>producers_dict</th>\n",
       "      <th>directors_dict</th>\n",
       "      <th>genre_dict</th>\n",
       "      <th>spoken_languages_dict</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>Toy Story Collection</td>\n",
       "      <td>30000000</td>\n",
       "      <td>[Animation, Comedy, Family]</td>\n",
       "      <td>http://toystory.disney.com/toy-story</td>\n",
       "      <td>862</td>\n",
       "      <td>tt0114709</td>\n",
       "      <td>en</td>\n",
       "      <td>Toy Story</td>\n",
       "      <td>Led by Woody, Andy's toys live happily in his ...</td>\n",
       "      <td>...</td>\n",
       "      <td>5415.0</td>\n",
       "      <td>[jealousy, toy, boy, friendship, friends, riva...</td>\n",
       "      <td>[John Lasseter, Ash Brannon, William Reeves, R...</td>\n",
       "      <td>[Bonnie Arnold, Ed Catmull, Ralph Guggenheim, ...</td>\n",
       "      <td>[Tom Hanks, Tim Allen, Don Rickles, Jim Varney...</td>\n",
       "      <td>{'Tom Hanks': 'name', 'Tim Allen': 'name', 'Do...</td>\n",
       "      <td>{'Bonnie Arnold': 'name', 'Ed Catmull': 'name'...</td>\n",
       "      <td>{'John Lasseter': 'name', 'Ash Brannon': 'name...</td>\n",
       "      <td>[{'id': 16, 'name': 'Animation'}, {'id': 35, '...</td>\n",
       "      <td>[{'iso_639_1': 'en', 'name': 'English'}]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>65000000</td>\n",
       "      <td>[Adventure, Fantasy, Family]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8844</td>\n",
       "      <td>tt0113497</td>\n",
       "      <td>en</td>\n",
       "      <td>Jumanji</td>\n",
       "      <td>When siblings Judy and Peter discover an encha...</td>\n",
       "      <td>...</td>\n",
       "      <td>2413.0</td>\n",
       "      <td>[board game, disappearance, based on children'...</td>\n",
       "      <td>[Joe Johnston, Thomas E. Ackerman]</td>\n",
       "      <td>[Larry J. Franco, Scott Kroopf, Ted Field, Rob...</td>\n",
       "      <td>[Robin Williams, Jonathan Hyde, Kirsten Dunst,...</td>\n",
       "      <td>{'Robin Williams': 'name', 'Jonathan Hyde': 'n...</td>\n",
       "      <td>{'Larry J. Franco': 'name', 'Scott Kroopf': 'n...</td>\n",
       "      <td>{'Joe Johnston': 'name', 'Thomas E. Ackerman':...</td>\n",
       "      <td>[{'id': 12, 'name': 'Adventure'}, {'id': 14, '...</td>\n",
       "      <td>[{'iso_639_1': 'en', 'name': 'English'}, {'iso...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>Grumpy Old Men Collection</td>\n",
       "      <td>0</td>\n",
       "      <td>[Romance, Comedy]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>15602</td>\n",
       "      <td>tt0113228</td>\n",
       "      <td>en</td>\n",
       "      <td>Grumpier Old Men</td>\n",
       "      <td>A family wedding reignites the ancient feud be...</td>\n",
       "      <td>...</td>\n",
       "      <td>92.0</td>\n",
       "      <td>[fishing, best friend, duringcreditsstinger, o...</td>\n",
       "      <td>[Howard Deutch]</td>\n",
       "      <td>[]</td>\n",
       "      <td>[Walter Matthau, Jack Lemmon, Ann-Margret, Sop...</td>\n",
       "      <td>{'Walter Matthau': 'name', 'Jack Lemmon': 'nam...</td>\n",
       "      <td>{}</td>\n",
       "      <td>{'Howard Deutch': 'name'}</td>\n",
       "      <td>[{'id': 10749, 'name': 'Romance'}, {'id': 35, ...</td>\n",
       "      <td>[{'iso_639_1': 'en', 'name': 'English'}]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16000000</td>\n",
       "      <td>[Comedy, Drama, Romance]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31357</td>\n",
       "      <td>tt0114885</td>\n",
       "      <td>en</td>\n",
       "      <td>Waiting to Exhale</td>\n",
       "      <td>Cheated on, mistreated and stepped on, the wom...</td>\n",
       "      <td>...</td>\n",
       "      <td>34.0</td>\n",
       "      <td>[based on novel, interracial relationship, sin...</td>\n",
       "      <td>[Forest Whitaker]</td>\n",
       "      <td>[Ronald Bass, Ezra Swerdlow, Deborah Schindler...</td>\n",
       "      <td>[Whitney Houston, Angela Bassett, Loretta Devi...</td>\n",
       "      <td>{'Whitney Houston': 'name', 'Angela Bassett': ...</td>\n",
       "      <td>{'Ronald Bass': 'name', 'Ezra Swerdlow': 'name...</td>\n",
       "      <td>{'Forest Whitaker': 'name'}</td>\n",
       "      <td>[{'id': 35, 'name': 'Comedy'}, {'id': 18, 'nam...</td>\n",
       "      <td>[{'iso_639_1': 'en', 'name': 'English'}]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>Father of the Bride Collection</td>\n",
       "      <td>0</td>\n",
       "      <td>[Comedy]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11862</td>\n",
       "      <td>tt0113041</td>\n",
       "      <td>en</td>\n",
       "      <td>Father of the Bride Part II</td>\n",
       "      <td>Just when George Banks has recovered from his ...</td>\n",
       "      <td>...</td>\n",
       "      <td>173.0</td>\n",
       "      <td>[baby, midlife crisis, confidence, aging, daug...</td>\n",
       "      <td>[Elliot Davis, Charles Shyer]</td>\n",
       "      <td>[Nancy Meyers]</td>\n",
       "      <td>[Steve Martin, Diane Keaton, Martin Short, Kim...</td>\n",
       "      <td>{'Steve Martin': 'name', 'Diane Keaton': 'name...</td>\n",
       "      <td>{'Nancy Meyers': 'name'}</td>\n",
       "      <td>{'Elliot Davis': 'name', 'Charles Shyer': 'name'}</td>\n",
       "      <td>[{'id': 35, 'name': 'Comedy'}]</td>\n",
       "      <td>[{'iso_639_1': 'en', 'name': 'English'}]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45428</th>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>[Drama, Family]</td>\n",
       "      <td>http://www.imdb.com/title/tt6209470/</td>\n",
       "      <td>439050</td>\n",
       "      <td>tt6209470</td>\n",
       "      <td>fa</td>\n",
       "      <td>رگ خواب</td>\n",
       "      <td>Rising and falling between a man and woman.</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>[tragic love]</td>\n",
       "      <td>[Hamid Nematollah, Babak Ardalan]</td>\n",
       "      <td>[Hamid Nematollah]</td>\n",
       "      <td>[Leila Hatami, Kourosh Tahami, Elham Korda]</td>\n",
       "      <td>{'Leila Hatami': 'name', 'Kourosh Tahami': 'na...</td>\n",
       "      <td>{'Hamid Nematollah': 'name'}</td>\n",
       "      <td>{'Hamid Nematollah': 'name', 'Babak Ardalan': ...</td>\n",
       "      <td>[{'id': 18, 'name': 'Drama'}, {'id': 10751, 'n...</td>\n",
       "      <td>[{'iso_639_1': 'fa', 'name': 'فارسی'}]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45429</th>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>[Drama]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>111109</td>\n",
       "      <td>tt2028550</td>\n",
       "      <td>tl</td>\n",
       "      <td>Siglo ng Pagluluwal</td>\n",
       "      <td>An artist struggles to finish his work while a...</td>\n",
       "      <td>...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[artist, play, pinoy]</td>\n",
       "      <td>[Lav Diaz]</td>\n",
       "      <td>[]</td>\n",
       "      <td>[Angel Aquino, Perry Dizon, Hazel Orencio, Joe...</td>\n",
       "      <td>{'Angel Aquino': 'name', 'Perry Dizon': 'name'...</td>\n",
       "      <td>{}</td>\n",
       "      <td>{'Lav Diaz': 'name'}</td>\n",
       "      <td>[{'id': 18, 'name': 'Drama'}]</td>\n",
       "      <td>[{'iso_639_1': 'tl', 'name': ''}]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45430</th>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>[Action, Drama, Thriller]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>67758</td>\n",
       "      <td>tt0303758</td>\n",
       "      <td>en</td>\n",
       "      <td>Betrayal</td>\n",
       "      <td>When one of her hits goes wrong, a professiona...</td>\n",
       "      <td>...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[Mark L. Lester, João Fernandes]</td>\n",
       "      <td>[]</td>\n",
       "      <td>[Erika Eleniak, Adam Baldwin, Julie du Page, J...</td>\n",
       "      <td>{'Erika Eleniak': 'name', 'Adam Baldwin': 'nam...</td>\n",
       "      <td>{}</td>\n",
       "      <td>{'Mark L. Lester': 'name', 'João Fernandes': '...</td>\n",
       "      <td>[{'id': 28, 'name': 'Action'}, {'id': 18, 'nam...</td>\n",
       "      <td>[{'iso_639_1': 'en', 'name': 'English'}]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45431</th>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>227506</td>\n",
       "      <td>tt0008536</td>\n",
       "      <td>en</td>\n",
       "      <td>Satana likuyushchiy</td>\n",
       "      <td>In a small town live two brothers, one a minis...</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[Yakov Protazanov]</td>\n",
       "      <td>[Joseph N. Ermolieff]</td>\n",
       "      <td>[Iwan Mosschuchin, Nathalie Lissenko, Pavel Pa...</td>\n",
       "      <td>{'Iwan Mosschuchin': 'name', 'Nathalie Lissenk...</td>\n",
       "      <td>{'Joseph N. Ermolieff': 'name'}</td>\n",
       "      <td>{'Yakov Protazanov': 'name'}</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45432</th>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>461257</td>\n",
       "      <td>tt6980792</td>\n",
       "      <td>en</td>\n",
       "      <td>Queerama</td>\n",
       "      <td>50 years after decriminalisation of homosexual...</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[Daisy Asquith]</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "      <td>{}</td>\n",
       "      <td>{}</td>\n",
       "      <td>{'Daisy Asquith': 'name'}</td>\n",
       "      <td>[]</td>\n",
       "      <td>[{'iso_639_1': 'en', 'name': 'English'}]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>45433 rows × 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       adult           belongs_to_collection    budget  \\\n",
       "0      False            Toy Story Collection  30000000   \n",
       "1      False                             NaN  65000000   \n",
       "2      False       Grumpy Old Men Collection         0   \n",
       "3      False                             NaN  16000000   \n",
       "4      False  Father of the Bride Collection         0   \n",
       "...      ...                             ...       ...   \n",
       "45428  False                             NaN         0   \n",
       "45429  False                             NaN         0   \n",
       "45430  False                             NaN         0   \n",
       "45431  False                             NaN         0   \n",
       "45432  False                             NaN         0   \n",
       "\n",
       "                             genres                              homepage  \\\n",
       "0       [Animation, Comedy, Family]  http://toystory.disney.com/toy-story   \n",
       "1      [Adventure, Fantasy, Family]                                   NaN   \n",
       "2                 [Romance, Comedy]                                   NaN   \n",
       "3          [Comedy, Drama, Romance]                                   NaN   \n",
       "4                          [Comedy]                                   NaN   \n",
       "...                             ...                                   ...   \n",
       "45428               [Drama, Family]  http://www.imdb.com/title/tt6209470/   \n",
       "45429                       [Drama]                                   NaN   \n",
       "45430     [Action, Drama, Thriller]                                   NaN   \n",
       "45431                            []                                   NaN   \n",
       "45432                            []                                   NaN   \n",
       "\n",
       "           id    imdb_id original_language               original_title  \\\n",
       "0         862  tt0114709                en                    Toy Story   \n",
       "1        8844  tt0113497                en                      Jumanji   \n",
       "2       15602  tt0113228                en             Grumpier Old Men   \n",
       "3       31357  tt0114885                en            Waiting to Exhale   \n",
       "4       11862  tt0113041                en  Father of the Bride Part II   \n",
       "...       ...        ...               ...                          ...   \n",
       "45428  439050  tt6209470                fa                      رگ خواب   \n",
       "45429  111109  tt2028550                tl          Siglo ng Pagluluwal   \n",
       "45430   67758  tt0303758                en                     Betrayal   \n",
       "45431  227506  tt0008536                en          Satana likuyushchiy   \n",
       "45432  461257  tt6980792                en                     Queerama   \n",
       "\n",
       "                                                overview  ... vote_count  \\\n",
       "0      Led by Woody, Andy's toys live happily in his ...  ...     5415.0   \n",
       "1      When siblings Judy and Peter discover an encha...  ...     2413.0   \n",
       "2      A family wedding reignites the ancient feud be...  ...       92.0   \n",
       "3      Cheated on, mistreated and stepped on, the wom...  ...       34.0   \n",
       "4      Just when George Banks has recovered from his ...  ...      173.0   \n",
       "...                                                  ...  ...        ...   \n",
       "45428        Rising and falling between a man and woman.  ...        1.0   \n",
       "45429  An artist struggles to finish his work while a...  ...        3.0   \n",
       "45430  When one of her hits goes wrong, a professiona...  ...        6.0   \n",
       "45431  In a small town live two brothers, one a minis...  ...        0.0   \n",
       "45432  50 years after decriminalisation of homosexual...  ...        0.0   \n",
       "\n",
       "                                                keywords  \\\n",
       "0      [jealousy, toy, boy, friendship, friends, riva...   \n",
       "1      [board game, disappearance, based on children'...   \n",
       "2      [fishing, best friend, duringcreditsstinger, o...   \n",
       "3      [based on novel, interracial relationship, sin...   \n",
       "4      [baby, midlife crisis, confidence, aging, daug...   \n",
       "...                                                  ...   \n",
       "45428                                      [tragic love]   \n",
       "45429                              [artist, play, pinoy]   \n",
       "45430                                                NaN   \n",
       "45431                                                NaN   \n",
       "45432                                                NaN   \n",
       "\n",
       "                                               directors  \\\n",
       "0      [John Lasseter, Ash Brannon, William Reeves, R...   \n",
       "1                     [Joe Johnston, Thomas E. Ackerman]   \n",
       "2                                        [Howard Deutch]   \n",
       "3                                      [Forest Whitaker]   \n",
       "4                          [Elliot Davis, Charles Shyer]   \n",
       "...                                                  ...   \n",
       "45428                  [Hamid Nematollah, Babak Ardalan]   \n",
       "45429                                         [Lav Diaz]   \n",
       "45430                   [Mark L. Lester, João Fernandes]   \n",
       "45431                                 [Yakov Protazanov]   \n",
       "45432                                    [Daisy Asquith]   \n",
       "\n",
       "                                               producers  \\\n",
       "0      [Bonnie Arnold, Ed Catmull, Ralph Guggenheim, ...   \n",
       "1      [Larry J. Franco, Scott Kroopf, Ted Field, Rob...   \n",
       "2                                                     []   \n",
       "3      [Ronald Bass, Ezra Swerdlow, Deborah Schindler...   \n",
       "4                                         [Nancy Meyers]   \n",
       "...                                                  ...   \n",
       "45428                                 [Hamid Nematollah]   \n",
       "45429                                                 []   \n",
       "45430                                                 []   \n",
       "45431                              [Joseph N. Ermolieff]   \n",
       "45432                                                 []   \n",
       "\n",
       "                                                  actors  \\\n",
       "0      [Tom Hanks, Tim Allen, Don Rickles, Jim Varney...   \n",
       "1      [Robin Williams, Jonathan Hyde, Kirsten Dunst,...   \n",
       "2      [Walter Matthau, Jack Lemmon, Ann-Margret, Sop...   \n",
       "3      [Whitney Houston, Angela Bassett, Loretta Devi...   \n",
       "4      [Steve Martin, Diane Keaton, Martin Short, Kim...   \n",
       "...                                                  ...   \n",
       "45428        [Leila Hatami, Kourosh Tahami, Elham Korda]   \n",
       "45429  [Angel Aquino, Perry Dizon, Hazel Orencio, Joe...   \n",
       "45430  [Erika Eleniak, Adam Baldwin, Julie du Page, J...   \n",
       "45431  [Iwan Mosschuchin, Nathalie Lissenko, Pavel Pa...   \n",
       "45432                                                 []   \n",
       "\n",
       "                                             actors_dict  \\\n",
       "0      {'Tom Hanks': 'name', 'Tim Allen': 'name', 'Do...   \n",
       "1      {'Robin Williams': 'name', 'Jonathan Hyde': 'n...   \n",
       "2      {'Walter Matthau': 'name', 'Jack Lemmon': 'nam...   \n",
       "3      {'Whitney Houston': 'name', 'Angela Bassett': ...   \n",
       "4      {'Steve Martin': 'name', 'Diane Keaton': 'name...   \n",
       "...                                                  ...   \n",
       "45428  {'Leila Hatami': 'name', 'Kourosh Tahami': 'na...   \n",
       "45429  {'Angel Aquino': 'name', 'Perry Dizon': 'name'...   \n",
       "45430  {'Erika Eleniak': 'name', 'Adam Baldwin': 'nam...   \n",
       "45431  {'Iwan Mosschuchin': 'name', 'Nathalie Lissenk...   \n",
       "45432                                                 {}   \n",
       "\n",
       "                                          producers_dict  \\\n",
       "0      {'Bonnie Arnold': 'name', 'Ed Catmull': 'name'...   \n",
       "1      {'Larry J. Franco': 'name', 'Scott Kroopf': 'n...   \n",
       "2                                                     {}   \n",
       "3      {'Ronald Bass': 'name', 'Ezra Swerdlow': 'name...   \n",
       "4                               {'Nancy Meyers': 'name'}   \n",
       "...                                                  ...   \n",
       "45428                       {'Hamid Nematollah': 'name'}   \n",
       "45429                                                 {}   \n",
       "45430                                                 {}   \n",
       "45431                    {'Joseph N. Ermolieff': 'name'}   \n",
       "45432                                                 {}   \n",
       "\n",
       "                                          directors_dict  \\\n",
       "0      {'John Lasseter': 'name', 'Ash Brannon': 'name...   \n",
       "1      {'Joe Johnston': 'name', 'Thomas E. Ackerman':...   \n",
       "2                              {'Howard Deutch': 'name'}   \n",
       "3                            {'Forest Whitaker': 'name'}   \n",
       "4      {'Elliot Davis': 'name', 'Charles Shyer': 'name'}   \n",
       "...                                                  ...   \n",
       "45428  {'Hamid Nematollah': 'name', 'Babak Ardalan': ...   \n",
       "45429                               {'Lav Diaz': 'name'}   \n",
       "45430  {'Mark L. Lester': 'name', 'João Fernandes': '...   \n",
       "45431                       {'Yakov Protazanov': 'name'}   \n",
       "45432                          {'Daisy Asquith': 'name'}   \n",
       "\n",
       "                                              genre_dict  \\\n",
       "0      [{'id': 16, 'name': 'Animation'}, {'id': 35, '...   \n",
       "1      [{'id': 12, 'name': 'Adventure'}, {'id': 14, '...   \n",
       "2      [{'id': 10749, 'name': 'Romance'}, {'id': 35, ...   \n",
       "3      [{'id': 35, 'name': 'Comedy'}, {'id': 18, 'nam...   \n",
       "4                         [{'id': 35, 'name': 'Comedy'}]   \n",
       "...                                                  ...   \n",
       "45428  [{'id': 18, 'name': 'Drama'}, {'id': 10751, 'n...   \n",
       "45429                      [{'id': 18, 'name': 'Drama'}]   \n",
       "45430  [{'id': 28, 'name': 'Action'}, {'id': 18, 'nam...   \n",
       "45431                                                 []   \n",
       "45432                                                 []   \n",
       "\n",
       "                                   spoken_languages_dict  \n",
       "0               [{'iso_639_1': 'en', 'name': 'English'}]  \n",
       "1      [{'iso_639_1': 'en', 'name': 'English'}, {'iso...  \n",
       "2               [{'iso_639_1': 'en', 'name': 'English'}]  \n",
       "3               [{'iso_639_1': 'en', 'name': 'English'}]  \n",
       "4               [{'iso_639_1': 'en', 'name': 'English'}]  \n",
       "...                                                  ...  \n",
       "45428             [{'iso_639_1': 'fa', 'name': 'فارسی'}]  \n",
       "45429                  [{'iso_639_1': 'tl', 'name': ''}]  \n",
       "45430           [{'iso_639_1': 'en', 'name': 'English'}]  \n",
       "45431                                                 []  \n",
       "45432           [{'iso_639_1': 'en', 'name': 'English'}]  \n",
       "\n",
       "[45433 rows x 33 columns]"
      ]
     },
     "execution_count": 240,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "movies = pd.read_csv('./data/movies/movies_metadata.csv', low_memory=False)\n",
    "print('Original Movies Shape: ', movies.shape, '\\n')\n",
    "\n",
    "# Remove the movies with erroneous data & convert ID to int:\n",
    "movies = movies[~movies['id'].str.contains('-')]\n",
    "movies['id'] = movies['id'].astype(int)\n",
    "\n",
    "# Remove duplicates:\n",
    "movies = dedupe(movies)\n",
    "\n",
    "print('Movies Shape after dropping bad data: ', movies.shape, '\\n')\n",
    "\n",
    "# Add Keywords & Credits\n",
    "movies = movies.merge(keywords, how='left', on='id')\n",
    "print('Movies Shape after merging keywords: ', movies.shape, '\\n')\n",
    "\n",
    "movies = movies.merge(credits, how='left', on='id')\n",
    "print('Movies Shape after merging credits: ', movies.shape, '\\n')\n",
    "\n",
    "movies = movies.drop(columns=['cast','crew','keyword_json'])\n",
    "\n",
    "# Function to convert collection to a string\n",
    "def get_collection(json):\n",
    "    if pd.isnull(json):\n",
    "        return np.nan\n",
    "    else:\n",
    "        return ast.literal_eval(json)['name']\n",
    "\n",
    "movies['belongs_to_collection'] = movies.belongs_to_collection.apply(get_collection)\n",
    "\n",
    "#preserve genres and spoken language dicts:\n",
    "movies['genre_dict'] = movies['genres']\n",
    "movies['spoken_languages_dict'] = movies['spoken_languages']\n",
    "#We can re-use our get_keywords function here to get genres & spoken languages\n",
    "movies['genres'] = movies.genres.apply(get_keywords)\n",
    "movies['spoken_languages'] = movies.spoken_languages.apply(get_keywords)\n",
    "\n",
    "print(movies.info(),timebreak)\n",
    "\n",
    "movies\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Movie Ratings\n",
    "\n",
    "The ratings dataset consists of approximately **270,000 annonomous userIds, 45,000 movieIds that we can link to our movies dataset, and 2.6 million user ratings** on a scale from **0.5 - 5.0** (worst to best), and a timestamp for when the rating was collected. A cursory glance through the data shows there are no duplicate ratings for user/movie combinations, saving us the work of averaging the scores! Clean data FTW!\n",
    "\n",
    "*ratings_small* is a subset of the ratings dataset available in the Full MovieLens dataset and contains about **100,000 ratings from 671 users on 9,066 movies**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 100004 entries, 0 to 100003\n",
      "Data columns (total 4 columns):\n",
      " #   Column     Non-Null Count   Dtype  \n",
      "---  ------     --------------   -----  \n",
      " 0   userId     100004 non-null  int64  \n",
      " 1   movieId    100004 non-null  int64  \n",
      " 2   rating     100004 non-null  float64\n",
      " 3   timestamp  100004 non-null  int64  \n",
      "dtypes: float64(1), int64(3)\n",
      "memory usage: 3.1 MB\n",
      "\n",
      "Count of duplicate ratings for a user/movie: 0\n",
      "\n",
      "Number of unique movies: 9066\n",
      "\n",
      "Number of unique users: 671\n"
     ]
    }
   ],
   "source": [
    "ratings_small = pd.read_csv('./data/movies/ratings_small.csv')\n",
    "\n",
    "ratings_small.info()\n",
    "print('\\nCount of duplicate ratings for a user/movie:',len(ratings_small[ratings_small.duplicated(subset=['userId','movieId'])]))\n",
    "print('\\nNumber of unique movies:',len(ratings_small.movieId.unique()))\n",
    "print('\\nNumber of unique users:',len(ratings_small.userId.unique()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 26024289 entries, 0 to 26024288\n",
      "Data columns (total 4 columns):\n",
      " #   Column     Dtype  \n",
      "---  ------     -----  \n",
      " 0   userId     int64  \n",
      " 1   movieId    int64  \n",
      " 2   rating     float64\n",
      " 3   timestamp  int64  \n",
      "dtypes: float64(1), int64(3)\n",
      "memory usage: 794.2 MB\n",
      "\n",
      "Count of duplicate ratings for a user/movie: 0\n",
      "\n",
      "Number of unique movies: 45115\n",
      "\n",
      "Number of unique users: 270896\n"
     ]
    }
   ],
   "source": [
    "ratings = pd.read_csv('./data/movies/ratings.csv')\n",
    "\n",
    "ratings.info()\n",
    "print('\\nCount of duplicate ratings for a user/movie:',len(ratings[ratings.duplicated(subset=['userId','movieId'])]))\n",
    "print('\\nNumber of unique movies:',len(ratings.movieId.unique()))\n",
    "print('\\nNumber of unique users:',len(ratings.userId.unique()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Understanding 2 - Visualization\n",
    "\n",
    "Visualize the any important attributes appropriately. Important: Provide an interpretation for any charts or graphs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plotting the rating distribution shows some bias towards higher ratings, this could be due to users feeling more passionately about a great movie than a mediocre one, or that users are more likely to seek out, view and subsequently rate high-rated movies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Ratings Histogram:\n",
    "sns.set_style(\"dark\")\n",
    "ax = sns.countplot(x=\"rating\", data=ratings)\n",
    "total = float(len(ratings))\n",
    "for p in ax.patches:\n",
    "    height = p.get_height()\n",
    "    ax.text(p.get_x()+p.get_width()/2,\n",
    "            height + 3,\n",
    "            '{0:.1%}'.format(height/total),\n",
    "            ha=\"center\") \n",
    "ax.set_ylabel(\"Count of Movies\")\n",
    "ax.set_xlabel(\"Movie Rating\")\n",
    "ax.set_title(\"Distribution of Movie Ratings\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Examining the distribution of movie genre could be useful if we decide to get more sophisticated with our recommendation engine, if we branch out of user preferences (or if we're recommending to a new user), we might try to keep the movie recommendations in line with the overall genre distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "mlb = MultiLabelBinarizer()\n",
    "genre_count = pd.DataFrame(mlb.fit_transform(movies['genres']),columns=mlb.classes_).sum()\n",
    "\n",
    "ax = sns.barplot(genre_count.values, genre_count.index)\n",
    "ax.set_xlabel(\"Movie Count\")\n",
    "ax.set_title(\"Distribution of Movie Genres\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The distribution of votes on each movie indicates that more users are willing to rate movies at a 0 than a 10, and the distribution is slightly left skewed, indicating users may be more likely to rate movies using the higher end of the scale."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.distplot(movies['vote_average'])\n",
    "ax.set_ylabel(\"\")\n",
    "ax.set_yticks([])\n",
    "ax.set_title(\"Distribution of Movie Vote Average\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is a word cloud for the common keywords found in the movies dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Code adapted from: https://github.com/amueller/word_cloud/blob/master/examples/simple.py\n",
    "l = keywords['keywords'].values.tolist()\n",
    "\n",
    "text = []\n",
    "for sublist in l:\n",
    "    for item in sublist:\n",
    "        text.append(item)\n",
    "        \n",
    "text = ' '.join(text)\n",
    "\n",
    "wordcloud = WordCloud(max_font_size=30).generate(text)\n",
    "plt.figure(figsize=(8,5))\n",
    "plt.imshow(wordcloud, interpolation=\"bilinear\")\n",
    "plt.axis(\"off\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Top 10 Stats:\n",
    "Below we'll list several top 10 statistics for movies.  For the most part, the stats will be the top 10 \"blank\" having the most movies.  The only exception to this is the top 10 movies by vote count.  The ordering is as follows:\n",
    "* Actors with the most movies\n",
    "* Genres with the most movies\n",
    "* Directors with the most movies\n",
    "* Producers with the most movies\n",
    "* Collections with the most movies\n",
    "* Original Languages with the most movies\n",
    "* Spoken Languages with the most movies\n",
    "* Highest rated movies by TMDB user votes (movies must have at least 1,000 votes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_top10_list(column, plot=True):\n",
    "    mlb = MultiLabelBinarizer()\n",
    "    if type(movies[column][0]) == list:\n",
    "        top10 = pd.DataFrame(mlb.fit_transform(movies[movies[column].str.len() > 0][column]),columns=mlb.classes_).sum().nlargest(n=10)\n",
    "    else:\n",
    "        top10 = movies[movies[column].str.len() > 0][column].value_counts().nlargest(10)\n",
    "    ax = sns.barplot(top10.values, top10.index)\n",
    "    ax.set_xlabel(\"Movie Count\")\n",
    "    ax.set_title(\"Top 10 {} by Movie Count\".format(column.capitalize()))\n",
    "    total = float(len(movies))\n",
    "    for p in ax.patches:\n",
    "            percentage = '{:.1f}%'.format(100 * p.get_width()/total)\n",
    "            x = p.get_x() + p.get_width() + 0.02\n",
    "            y = p.get_y() + p.get_height()/1.5\n",
    "            ax.annotate(percentage, (x, y))\n",
    "    if plot:\n",
    "        return plt.show()\n",
    "    plt.close()\n",
    "    return top10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "get_top10_list('actors')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "get_top10_list('genres')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "get_top10_list('directors')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "get_top10_list('producers')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "get_top10_list('belongs_to_collection')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "get_top10_list('original_language')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 10 Spoken Languages by Movie Count\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Movie Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>English</th>\n",
       "      <td>28727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Français</th>\n",
       "      <td>4193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Deutsch</th>\n",
       "      <td>2624</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Español</th>\n",
       "      <td>2413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Italiano</th>\n",
       "      <td>2366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>日本語</th>\n",
       "      <td>1756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pусский</th>\n",
       "      <td>1563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>普通话</th>\n",
       "      <td>790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>हिन्दी</th>\n",
       "      <td>706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Português</th>\n",
       "      <td>591</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Movie Count\n",
       "English          28727\n",
       "Français          4193\n",
       "Deutsch           2624\n",
       "Español           2413\n",
       "Italiano          2366\n",
       "日本語               1756\n",
       "Pусский           1563\n",
       "普通话                790\n",
       "हिन्दी             706\n",
       "Português          591"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('Top 10 Spoken Languages by Movie Count')\n",
    "pd.DataFrame(get_top10_list('spoken_languages', plot=False), columns=['Movie Count'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>vote_average</th>\n",
       "      <th>vote_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>314</th>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>8.5</td>\n",
       "      <td>8358.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>834</th>\n",
       "      <td>The Godfather</td>\n",
       "      <td>8.5</td>\n",
       "      <td>6024.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40222</th>\n",
       "      <td>Your Name.</td>\n",
       "      <td>8.5</td>\n",
       "      <td>1030.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>292</th>\n",
       "      <td>Pulp Fiction</td>\n",
       "      <td>8.3</td>\n",
       "      <td>8670.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>522</th>\n",
       "      <td>Schindler's List</td>\n",
       "      <td>8.3</td>\n",
       "      <td>4436.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1152</th>\n",
       "      <td>One Flew Over the Cuckoo's Nest</td>\n",
       "      <td>8.3</td>\n",
       "      <td>3001.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1176</th>\n",
       "      <td>Psycho</td>\n",
       "      <td>8.3</td>\n",
       "      <td>2405.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1178</th>\n",
       "      <td>The Godfather: Part II</td>\n",
       "      <td>8.3</td>\n",
       "      <td>3418.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1184</th>\n",
       "      <td>Once Upon a Time in America</td>\n",
       "      <td>8.3</td>\n",
       "      <td>1104.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2210</th>\n",
       "      <td>Life Is Beautiful</td>\n",
       "      <td>8.3</td>\n",
       "      <td>3643.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 title  vote_average  vote_count\n",
       "314           The Shawshank Redemption           8.5      8358.0\n",
       "834                      The Godfather           8.5      6024.0\n",
       "40222                       Your Name.           8.5      1030.0\n",
       "292                       Pulp Fiction           8.3      8670.0\n",
       "522                   Schindler's List           8.3      4436.0\n",
       "1152   One Flew Over the Cuckoo's Nest           8.3      3001.0\n",
       "1176                            Psycho           8.3      2405.0\n",
       "1178            The Godfather: Part II           8.3      3418.0\n",
       "1184       Once Upon a Time in America           8.3      1104.0\n",
       "2210                 Life Is Beautiful           8.3      3643.0"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies[movies['vote_count'] > 999].nlargest(10, 'vote_average')[['title','vote_average','vote_count']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modeling and Evaluation 1\n",
    "\n",
    "Train and adjust parameters\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Basic Explicit Model (user-item)\n",
    "This is the very basic 5 liner from TuriCreate (GraphLab) that uses users, movies, and ratings to make recommendations.  We'll convert our pandas dataframes to SFrames in order to build the recommender, and let Turi Create choose a model for us.  The **ranking_factorization_recommender** (user-item) was selected, so let's see how it performs. We added a couple of paramters here **none** for userId will make predictions for all users, automatically excluding movies they've rated, and **k=5** limits the recommendations to the top 5 recommended movies per user.\n",
    "\n",
    "Additional info from Apple's documentation: https://apple.github.io/turicreate/docs/userguide/recommender/choosing-a-model.html\n",
    "\n",
    "*The RankingFactorizationRecommender tries to recommend items that are both similar to the items in a user's dataset and, if rating information is provided, those that would be rated highly by the user. It tends to predict ratings with less accuracy than the non-ranking factorization_recommender, but it tends to do much better at choosing items that a user would rate highly. This is because it also penalizes the predicted rating of items that are significantly different from the items a user has interacted with. In other words, it only predicts a high rating for user-item pairs in which it predicts a high rating and is confident in that prediction.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>Preparing data set.</pre>"
      ],
      "text/plain": [
       "Preparing data set."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>    Data has 26024289 observations with 270896 users and 45115 items.</pre>"
      ],
      "text/plain": [
       "    Data has 26024289 observations with 270896 users and 45115 items."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>    Data prepared in: 8.03705s</pre>"
      ],
      "text/plain": [
       "    Data prepared in: 8.03705s"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>Training ranking_factorization_recommender for recommendations.</pre>"
      ],
      "text/plain": [
       "Training ranking_factorization_recommender for recommendations."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+--------------------------------+--------------------------------------------------+----------+</pre>"
      ],
      "text/plain": [
       "+--------------------------------+--------------------------------------------------+----------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| Parameter                      | Description                                      | Value    |</pre>"
      ],
      "text/plain": [
       "| Parameter                      | Description                                      | Value    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+--------------------------------+--------------------------------------------------+----------+</pre>"
      ],
      "text/plain": [
       "+--------------------------------+--------------------------------------------------+----------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| num_factors                    | Factor Dimension                                 | 32       |</pre>"
      ],
      "text/plain": [
       "| num_factors                    | Factor Dimension                                 | 32       |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| regularization                 | L2 Regularization on Factors                     | 1e-09    |</pre>"
      ],
      "text/plain": [
       "| regularization                 | L2 Regularization on Factors                     | 1e-09    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| solver                         | Solver used for training                         | adagrad  |</pre>"
      ],
      "text/plain": [
       "| solver                         | Solver used for training                         | adagrad  |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| linear_regularization          | L2 Regularization on Linear Coefficients         | 1e-09    |</pre>"
      ],
      "text/plain": [
       "| linear_regularization          | L2 Regularization on Linear Coefficients         | 1e-09    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| ranking_regularization         | Rank-based Regularization Weight                 | 0.25     |</pre>"
      ],
      "text/plain": [
       "| ranking_regularization         | Rank-based Regularization Weight                 | 0.25     |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| max_iterations                 | Maximum Number of Iterations                     | 25       |</pre>"
      ],
      "text/plain": [
       "| max_iterations                 | Maximum Number of Iterations                     | 25       |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+--------------------------------+--------------------------------------------------+----------+</pre>"
      ],
      "text/plain": [
       "+--------------------------------+--------------------------------------------------+----------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>  Optimizing model using SGD; tuning step size.</pre>"
      ],
      "text/plain": [
       "  Optimizing model using SGD; tuning step size."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>  Using 3253036 / 26024289 points for tuning the step size.</pre>"
      ],
      "text/plain": [
       "  Using 3253036 / 26024289 points for tuning the step size."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+---------+-------------------+------------------------------------------+</pre>"
      ],
      "text/plain": [
       "+---------+-------------------+------------------------------------------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| Attempt | Initial Step Size | Estimated Objective Value                |</pre>"
      ],
      "text/plain": [
       "| Attempt | Initial Step Size | Estimated Objective Value                |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+---------+-------------------+------------------------------------------+</pre>"
      ],
      "text/plain": [
       "+---------+-------------------+------------------------------------------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 0       | 16.6667           | Not Viable                               |</pre>"
      ],
      "text/plain": [
       "| 0       | 16.6667           | Not Viable                               |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 1       | 4.16667           | Not Viable                               |</pre>"
      ],
      "text/plain": [
       "| 1       | 4.16667           | Not Viable                               |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 2       | 1.04167           | Not Viable                               |</pre>"
      ],
      "text/plain": [
       "| 2       | 1.04167           | Not Viable                               |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 3       | 0.260417          | Not Viable                               |</pre>"
      ],
      "text/plain": [
       "| 3       | 0.260417          | Not Viable                               |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 4       | 0.0651042         | 1.44142                                  |</pre>"
      ],
      "text/plain": [
       "| 4       | 0.0651042         | 1.44142                                  |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 5       | 0.0325521         | 1.39563                                  |</pre>"
      ],
      "text/plain": [
       "| 5       | 0.0325521         | 1.39563                                  |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 6       | 0.016276          | 1.34152                                  |</pre>"
      ],
      "text/plain": [
       "| 6       | 0.016276          | 1.34152                                  |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 7       | 0.00813802        | 1.52155                                  |</pre>"
      ],
      "text/plain": [
       "| 7       | 0.00813802        | 1.52155                                  |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 8       | 0.00406901        | 1.73281                                  |</pre>"
      ],
      "text/plain": [
       "| 8       | 0.00406901        | 1.73281                                  |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 9       | 0.00203451        | 2.02221                                  |</pre>"
      ],
      "text/plain": [
       "| 9       | 0.00203451        | 2.02221                                  |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+---------+-------------------+------------------------------------------+</pre>"
      ],
      "text/plain": [
       "+---------+-------------------+------------------------------------------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| Final   | 0.016276          | 1.34152                                  |</pre>"
      ],
      "text/plain": [
       "| Final   | 0.016276          | 1.34152                                  |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+---------+-------------------+------------------------------------------+</pre>"
      ],
      "text/plain": [
       "+---------+-------------------+------------------------------------------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>Starting Optimization.</pre>"
      ],
      "text/plain": [
       "Starting Optimization."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+---------+--------------+-------------------+-----------------------+-------------+</pre>"
      ],
      "text/plain": [
       "+---------+--------------+-------------------+-----------------------+-------------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| Iter.   | Elapsed Time | Approx. Objective | Approx. Training RMSE | Step Size   |</pre>"
      ],
      "text/plain": [
       "| Iter.   | Elapsed Time | Approx. Objective | Approx. Training RMSE | Step Size   |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+---------+--------------+-------------------+-----------------------+-------------+</pre>"
      ],
      "text/plain": [
       "+---------+--------------+-------------------+-----------------------+-------------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| Initial | 103us        | 2.22568           | 1.06544               |             |</pre>"
      ],
      "text/plain": [
       "| Initial | 103us        | 2.22568           | 1.06544               |             |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+---------+--------------+-------------------+-----------------------+-------------+</pre>"
      ],
      "text/plain": [
       "+---------+--------------+-------------------+-----------------------+-------------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 1       | 13.14s       | 1.44722           | 0.968265              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 1       | 13.14s       | 1.44722           | 0.968265              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 2       | 25.96s       | 1.33084           | 0.964465              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 2       | 25.96s       | 1.33084           | 0.964465              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 3       | 38.97s       | 1.2238            | 0.937169              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 3       | 38.97s       | 1.2238            | 0.937169              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 4       | 51.59s       | 1.19208           | 0.932733              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 4       | 51.59s       | 1.19208           | 0.932733              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 5       | 1m 4s        | 1.17648           | 0.932439              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 5       | 1m 4s        | 1.17648           | 0.932439              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 7       | 1m 29s       | 1.15574           | 0.930967              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 7       | 1m 29s       | 1.15574           | 0.930967              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 8       | 1m 42s       | 1.1494            | 0.93063               | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 8       | 1m 42s       | 1.1494            | 0.93063               | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 9       | 1m 54s       | 1.14356           | 0.929895              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 9       | 1m 54s       | 1.14356           | 0.929895              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 10      | 2m 7s        | 1.13846           | 0.929315              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 10      | 2m 7s        | 1.13846           | 0.929315              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 11      | 2m 19s       | 1.13438           | 0.928265              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 11      | 2m 19s       | 1.13438           | 0.928265              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 12      | 2m 31s       | 1.13033           | 0.927846              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 12      | 2m 31s       | 1.13033           | 0.927846              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 13      | 2m 43s       | 1.12675           | 0.927061              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 13      | 2m 43s       | 1.12675           | 0.927061              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 14      | 2m 56s       | 1.12351           | 0.926352              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 14      | 2m 56s       | 1.12351           | 0.926352              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 15      | 3m 8s        | 1.12017           | 0.925326              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 15      | 3m 8s        | 1.12017           | 0.925326              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 16      | 3m 21s       | 1.11697           | 0.924492              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 16      | 3m 21s       | 1.11697           | 0.924492              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 17      | 3m 33s       | 1.11411           | 0.923633              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 17      | 3m 33s       | 1.11411           | 0.923633              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 18      | 3m 45s       | 1.11128           | 0.922845              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 18      | 3m 45s       | 1.11128           | 0.922845              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 19      | 3m 57s       | 1.10843           | 0.921676              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 19      | 3m 57s       | 1.10843           | 0.921676              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 20      | 4m 9s        | 1.10584           | 0.920945              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 20      | 4m 9s        | 1.10584           | 0.920945              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 21      | 4m 21s       | 1.10335           | 0.919879              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 21      | 4m 21s       | 1.10335           | 0.919879              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 22      | 4m 33s       | 1.10067           | 0.919246              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 22      | 4m 33s       | 1.10067           | 0.919246              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 23      | 4m 45s       | 1.09824           | 0.918274              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 23      | 4m 45s       | 1.09824           | 0.918274              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 24      | 4m 57s       | 1.09581           | 0.917217              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 24      | 4m 57s       | 1.09581           | 0.917217              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 25      | 5m 10s       | 1.09359           | 0.916718              | 0.016276    |</pre>"
      ],
      "text/plain": [
       "| 25      | 5m 10s       | 1.09359           | 0.916718              | 0.016276    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+---------+--------------+-------------------+-----------------------+-------------+</pre>"
      ],
      "text/plain": [
       "+---------+--------------+-------------------+-----------------------+-------------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>Optimization Complete: Maximum number of passes through the data reached.</pre>"
      ],
      "text/plain": [
       "Optimization Complete: Maximum number of passes through the data reached."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>Computing final objective value and training RMSE.</pre>"
      ],
      "text/plain": [
       "Computing final objective value and training RMSE."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>       Final objective value: 1.09031</pre>"
      ],
      "text/plain": [
       "       Final objective value: 1.09031"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>       Final training RMSE: 0.913562</pre>"
      ],
      "text/plain": [
       "       Final training RMSE: 0.913562"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 1000/270896 queries. users per second: 3206.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 1000/270896 queries. users per second: 3206.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 2000/270896 queries. users per second: 3239.21</pre>"
      ],
      "text/plain": [
       "recommendations finished on 2000/270896 queries. users per second: 3239.21"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 3000/270896 queries. users per second: 3247.89</pre>"
      ],
      "text/plain": [
       "recommendations finished on 3000/270896 queries. users per second: 3247.89"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 4000/270896 queries. users per second: 3253.46</pre>"
      ],
      "text/plain": [
       "recommendations finished on 4000/270896 queries. users per second: 3253.46"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 5000/270896 queries. users per second: 3259.87</pre>"
      ],
      "text/plain": [
       "recommendations finished on 5000/270896 queries. users per second: 3259.87"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 6000/270896 queries. users per second: 3262.76</pre>"
      ],
      "text/plain": [
       "recommendations finished on 6000/270896 queries. users per second: 3262.76"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 7000/270896 queries. users per second: 3264.47</pre>"
      ],
      "text/plain": [
       "recommendations finished on 7000/270896 queries. users per second: 3264.47"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 8000/270896 queries. users per second: 3264.89</pre>"
      ],
      "text/plain": [
       "recommendations finished on 8000/270896 queries. users per second: 3264.89"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 9000/270896 queries. users per second: 3268.54</pre>"
      ],
      "text/plain": [
       "recommendations finished on 9000/270896 queries. users per second: 3268.54"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 10000/270896 queries. users per second: 3269.56</pre>"
      ],
      "text/plain": [
       "recommendations finished on 10000/270896 queries. users per second: 3269.56"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 11000/270896 queries. users per second: 3269.47</pre>"
      ],
      "text/plain": [
       "recommendations finished on 11000/270896 queries. users per second: 3269.47"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 12000/270896 queries. users per second: 3267.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 12000/270896 queries. users per second: 3267.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 13000/270896 queries. users per second: 3268.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 13000/270896 queries. users per second: 3268.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 14000/270896 queries. users per second: 3267.42</pre>"
      ],
      "text/plain": [
       "recommendations finished on 14000/270896 queries. users per second: 3267.42"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 15000/270896 queries. users per second: 3267.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 15000/270896 queries. users per second: 3267.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 16000/270896 queries. users per second: 3269.93</pre>"
      ],
      "text/plain": [
       "recommendations finished on 16000/270896 queries. users per second: 3269.93"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 17000/270896 queries. users per second: 3268.06</pre>"
      ],
      "text/plain": [
       "recommendations finished on 17000/270896 queries. users per second: 3268.06"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 18000/270896 queries. users per second: 3268.76</pre>"
      ],
      "text/plain": [
       "recommendations finished on 18000/270896 queries. users per second: 3268.76"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 19000/270896 queries. users per second: 3269.04</pre>"
      ],
      "text/plain": [
       "recommendations finished on 19000/270896 queries. users per second: 3269.04"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 20000/270896 queries. users per second: 3267.28</pre>"
      ],
      "text/plain": [
       "recommendations finished on 20000/270896 queries. users per second: 3267.28"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 21000/270896 queries. users per second: 3263.82</pre>"
      ],
      "text/plain": [
       "recommendations finished on 21000/270896 queries. users per second: 3263.82"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 22000/270896 queries. users per second: 3263.56</pre>"
      ],
      "text/plain": [
       "recommendations finished on 22000/270896 queries. users per second: 3263.56"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 23000/270896 queries. users per second: 3263.21</pre>"
      ],
      "text/plain": [
       "recommendations finished on 23000/270896 queries. users per second: 3263.21"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 24000/270896 queries. users per second: 3258.38</pre>"
      ],
      "text/plain": [
       "recommendations finished on 24000/270896 queries. users per second: 3258.38"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 25000/270896 queries. users per second: 3253.33</pre>"
      ],
      "text/plain": [
       "recommendations finished on 25000/270896 queries. users per second: 3253.33"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 26000/270896 queries. users per second: 3249.57</pre>"
      ],
      "text/plain": [
       "recommendations finished on 26000/270896 queries. users per second: 3249.57"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 27000/270896 queries. users per second: 3246.98</pre>"
      ],
      "text/plain": [
       "recommendations finished on 27000/270896 queries. users per second: 3246.98"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 28000/270896 queries. users per second: 3248.43</pre>"
      ],
      "text/plain": [
       "recommendations finished on 28000/270896 queries. users per second: 3248.43"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 29000/270896 queries. users per second: 3248.96</pre>"
      ],
      "text/plain": [
       "recommendations finished on 29000/270896 queries. users per second: 3248.96"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 30000/270896 queries. users per second: 3247.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 30000/270896 queries. users per second: 3247.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 31000/270896 queries. users per second: 3249.08</pre>"
      ],
      "text/plain": [
       "recommendations finished on 31000/270896 queries. users per second: 3249.08"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 32000/270896 queries. users per second: 3249.95</pre>"
      ],
      "text/plain": [
       "recommendations finished on 32000/270896 queries. users per second: 3249.95"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 33000/270896 queries. users per second: 3248.83</pre>"
      ],
      "text/plain": [
       "recommendations finished on 33000/270896 queries. users per second: 3248.83"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 34000/270896 queries. users per second: 3248.91</pre>"
      ],
      "text/plain": [
       "recommendations finished on 34000/270896 queries. users per second: 3248.91"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 35000/270896 queries. users per second: 3250.05</pre>"
      ],
      "text/plain": [
       "recommendations finished on 35000/270896 queries. users per second: 3250.05"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 36000/270896 queries. users per second: 3250.84</pre>"
      ],
      "text/plain": [
       "recommendations finished on 36000/270896 queries. users per second: 3250.84"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 37000/270896 queries. users per second: 3251.22</pre>"
      ],
      "text/plain": [
       "recommendations finished on 37000/270896 queries. users per second: 3251.22"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 38000/270896 queries. users per second: 3252.33</pre>"
      ],
      "text/plain": [
       "recommendations finished on 38000/270896 queries. users per second: 3252.33"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 39000/270896 queries. users per second: 3253.01</pre>"
      ],
      "text/plain": [
       "recommendations finished on 39000/270896 queries. users per second: 3253.01"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 40000/270896 queries. users per second: 3253.67</pre>"
      ],
      "text/plain": [
       "recommendations finished on 40000/270896 queries. users per second: 3253.67"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 41000/270896 queries. users per second: 3254.29</pre>"
      ],
      "text/plain": [
       "recommendations finished on 41000/270896 queries. users per second: 3254.29"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 42000/270896 queries. users per second: 3253.75</pre>"
      ],
      "text/plain": [
       "recommendations finished on 42000/270896 queries. users per second: 3253.75"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 43000/270896 queries. users per second: 3250.85</pre>"
      ],
      "text/plain": [
       "recommendations finished on 43000/270896 queries. users per second: 3250.85"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 44000/270896 queries. users per second: 3249.82</pre>"
      ],
      "text/plain": [
       "recommendations finished on 44000/270896 queries. users per second: 3249.82"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 45000/270896 queries. users per second: 3246.51</pre>"
      ],
      "text/plain": [
       "recommendations finished on 45000/270896 queries. users per second: 3246.51"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 46000/270896 queries. users per second: 3242.16</pre>"
      ],
      "text/plain": [
       "recommendations finished on 46000/270896 queries. users per second: 3242.16"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 47000/270896 queries. users per second: 3241.09</pre>"
      ],
      "text/plain": [
       "recommendations finished on 47000/270896 queries. users per second: 3241.09"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 48000/270896 queries. users per second: 3241.34</pre>"
      ],
      "text/plain": [
       "recommendations finished on 48000/270896 queries. users per second: 3241.34"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 49000/270896 queries. users per second: 3241.99</pre>"
      ],
      "text/plain": [
       "recommendations finished on 49000/270896 queries. users per second: 3241.99"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 50000/270896 queries. users per second: 3241.04</pre>"
      ],
      "text/plain": [
       "recommendations finished on 50000/270896 queries. users per second: 3241.04"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 51000/270896 queries. users per second: 3241.94</pre>"
      ],
      "text/plain": [
       "recommendations finished on 51000/270896 queries. users per second: 3241.94"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 52000/270896 queries. users per second: 3242.07</pre>"
      ],
      "text/plain": [
       "recommendations finished on 52000/270896 queries. users per second: 3242.07"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 53000/270896 queries. users per second: 3242.37</pre>"
      ],
      "text/plain": [
       "recommendations finished on 53000/270896 queries. users per second: 3242.37"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 54000/270896 queries. users per second: 3242.52</pre>"
      ],
      "text/plain": [
       "recommendations finished on 54000/270896 queries. users per second: 3242.52"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 55000/270896 queries. users per second: 3243.32</pre>"
      ],
      "text/plain": [
       "recommendations finished on 55000/270896 queries. users per second: 3243.32"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 56000/270896 queries. users per second: 3242.23</pre>"
      ],
      "text/plain": [
       "recommendations finished on 56000/270896 queries. users per second: 3242.23"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 57000/270896 queries. users per second: 3241.91</pre>"
      ],
      "text/plain": [
       "recommendations finished on 57000/270896 queries. users per second: 3241.91"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 58000/270896 queries. users per second: 3240.71</pre>"
      ],
      "text/plain": [
       "recommendations finished on 58000/270896 queries. users per second: 3240.71"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 59000/270896 queries. users per second: 3239.26</pre>"
      ],
      "text/plain": [
       "recommendations finished on 59000/270896 queries. users per second: 3239.26"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 60000/270896 queries. users per second: 3239.86</pre>"
      ],
      "text/plain": [
       "recommendations finished on 60000/270896 queries. users per second: 3239.86"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 61000/270896 queries. users per second: 3240.22</pre>"
      ],
      "text/plain": [
       "recommendations finished on 61000/270896 queries. users per second: 3240.22"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 62000/270896 queries. users per second: 3239.99</pre>"
      ],
      "text/plain": [
       "recommendations finished on 62000/270896 queries. users per second: 3239.99"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 63000/270896 queries. users per second: 3240.22</pre>"
      ],
      "text/plain": [
       "recommendations finished on 63000/270896 queries. users per second: 3240.22"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 64000/270896 queries. users per second: 3240.78</pre>"
      ],
      "text/plain": [
       "recommendations finished on 64000/270896 queries. users per second: 3240.78"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 65000/270896 queries. users per second: 3240.99</pre>"
      ],
      "text/plain": [
       "recommendations finished on 65000/270896 queries. users per second: 3240.99"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 66000/270896 queries. users per second: 3241.07</pre>"
      ],
      "text/plain": [
       "recommendations finished on 66000/270896 queries. users per second: 3241.07"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 67000/270896 queries. users per second: 3240.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 67000/270896 queries. users per second: 3240.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 68000/270896 queries. users per second: 3240.74</pre>"
      ],
      "text/plain": [
       "recommendations finished on 68000/270896 queries. users per second: 3240.74"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 69000/270896 queries. users per second: 3240.28</pre>"
      ],
      "text/plain": [
       "recommendations finished on 69000/270896 queries. users per second: 3240.28"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 70000/270896 queries. users per second: 3240.37</pre>"
      ],
      "text/plain": [
       "recommendations finished on 70000/270896 queries. users per second: 3240.37"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 71000/270896 queries. users per second: 3240.46</pre>"
      ],
      "text/plain": [
       "recommendations finished on 71000/270896 queries. users per second: 3240.46"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 72000/270896 queries. users per second: 3240.07</pre>"
      ],
      "text/plain": [
       "recommendations finished on 72000/270896 queries. users per second: 3240.07"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 73000/270896 queries. users per second: 3240.13</pre>"
      ],
      "text/plain": [
       "recommendations finished on 73000/270896 queries. users per second: 3240.13"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 74000/270896 queries. users per second: 3240.69</pre>"
      ],
      "text/plain": [
       "recommendations finished on 74000/270896 queries. users per second: 3240.69"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 75000/270896 queries. users per second: 3241.04</pre>"
      ],
      "text/plain": [
       "recommendations finished on 75000/270896 queries. users per second: 3241.04"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 76000/270896 queries. users per second: 3241.22</pre>"
      ],
      "text/plain": [
       "recommendations finished on 76000/270896 queries. users per second: 3241.22"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 77000/270896 queries. users per second: 3240.66</pre>"
      ],
      "text/plain": [
       "recommendations finished on 77000/270896 queries. users per second: 3240.66"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 78000/270896 queries. users per second: 3240.49</pre>"
      ],
      "text/plain": [
       "recommendations finished on 78000/270896 queries. users per second: 3240.49"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 79000/270896 queries. users per second: 3240.33</pre>"
      ],
      "text/plain": [
       "recommendations finished on 79000/270896 queries. users per second: 3240.33"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 80000/270896 queries. users per second: 3240.45</pre>"
      ],
      "text/plain": [
       "recommendations finished on 80000/270896 queries. users per second: 3240.45"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 81000/270896 queries. users per second: 3240.54</pre>"
      ],
      "text/plain": [
       "recommendations finished on 81000/270896 queries. users per second: 3240.54"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 82000/270896 queries. users per second: 3240.17</pre>"
      ],
      "text/plain": [
       "recommendations finished on 82000/270896 queries. users per second: 3240.17"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 83000/270896 queries. users per second: 3240.37</pre>"
      ],
      "text/plain": [
       "recommendations finished on 83000/270896 queries. users per second: 3240.37"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 84000/270896 queries. users per second: 3240.26</pre>"
      ],
      "text/plain": [
       "recommendations finished on 84000/270896 queries. users per second: 3240.26"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 85000/270896 queries. users per second: 3240.36</pre>"
      ],
      "text/plain": [
       "recommendations finished on 85000/270896 queries. users per second: 3240.36"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 86000/270896 queries. users per second: 3239.41</pre>"
      ],
      "text/plain": [
       "recommendations finished on 86000/270896 queries. users per second: 3239.41"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 87000/270896 queries. users per second: 3239.09</pre>"
      ],
      "text/plain": [
       "recommendations finished on 87000/270896 queries. users per second: 3239.09"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 88000/270896 queries. users per second: 3239.06</pre>"
      ],
      "text/plain": [
       "recommendations finished on 88000/270896 queries. users per second: 3239.06"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 89000/270896 queries. users per second: 3239.19</pre>"
      ],
      "text/plain": [
       "recommendations finished on 89000/270896 queries. users per second: 3239.19"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 90000/270896 queries. users per second: 3239.58</pre>"
      ],
      "text/plain": [
       "recommendations finished on 90000/270896 queries. users per second: 3239.58"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 91000/270896 queries. users per second: 3239.37</pre>"
      ],
      "text/plain": [
       "recommendations finished on 91000/270896 queries. users per second: 3239.37"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 92000/270896 queries. users per second: 3239.22</pre>"
      ],
      "text/plain": [
       "recommendations finished on 92000/270896 queries. users per second: 3239.22"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 93000/270896 queries. users per second: 3239.42</pre>"
      ],
      "text/plain": [
       "recommendations finished on 93000/270896 queries. users per second: 3239.42"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 94000/270896 queries. users per second: 3239.57</pre>"
      ],
      "text/plain": [
       "recommendations finished on 94000/270896 queries. users per second: 3239.57"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 95000/270896 queries. users per second: 3239.55</pre>"
      ],
      "text/plain": [
       "recommendations finished on 95000/270896 queries. users per second: 3239.55"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 96000/270896 queries. users per second: 3238.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 96000/270896 queries. users per second: 3238.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 97000/270896 queries. users per second: 3234.51</pre>"
      ],
      "text/plain": [
       "recommendations finished on 97000/270896 queries. users per second: 3234.51"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 98000/270896 queries. users per second: 3231.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 98000/270896 queries. users per second: 3231.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 99000/270896 queries. users per second: 3227.88</pre>"
      ],
      "text/plain": [
       "recommendations finished on 99000/270896 queries. users per second: 3227.88"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 100000/270896 queries. users per second: 3227.09</pre>"
      ],
      "text/plain": [
       "recommendations finished on 100000/270896 queries. users per second: 3227.09"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 101000/270896 queries. users per second: 3226.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 101000/270896 queries. users per second: 3226.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 102000/270896 queries. users per second: 3227.15</pre>"
      ],
      "text/plain": [
       "recommendations finished on 102000/270896 queries. users per second: 3227.15"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 103000/270896 queries. users per second: 3227.65</pre>"
      ],
      "text/plain": [
       "recommendations finished on 103000/270896 queries. users per second: 3227.65"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 104000/270896 queries. users per second: 3227.95</pre>"
      ],
      "text/plain": [
       "recommendations finished on 104000/270896 queries. users per second: 3227.95"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 105000/270896 queries. users per second: 3228.35</pre>"
      ],
      "text/plain": [
       "recommendations finished on 105000/270896 queries. users per second: 3228.35"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 106000/270896 queries. users per second: 3228.71</pre>"
      ],
      "text/plain": [
       "recommendations finished on 106000/270896 queries. users per second: 3228.71"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 107000/270896 queries. users per second: 3229.12</pre>"
      ],
      "text/plain": [
       "recommendations finished on 107000/270896 queries. users per second: 3229.12"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 108000/270896 queries. users per second: 3229.58</pre>"
      ],
      "text/plain": [
       "recommendations finished on 108000/270896 queries. users per second: 3229.58"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 109000/270896 queries. users per second: 3229.95</pre>"
      ],
      "text/plain": [
       "recommendations finished on 109000/270896 queries. users per second: 3229.95"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 110000/270896 queries. users per second: 3229.83</pre>"
      ],
      "text/plain": [
       "recommendations finished on 110000/270896 queries. users per second: 3229.83"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 111000/270896 queries. users per second: 3229.72</pre>"
      ],
      "text/plain": [
       "recommendations finished on 111000/270896 queries. users per second: 3229.72"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 112000/270896 queries. users per second: 3229</pre>"
      ],
      "text/plain": [
       "recommendations finished on 112000/270896 queries. users per second: 3229"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 113000/270896 queries. users per second: 3229.37</pre>"
      ],
      "text/plain": [
       "recommendations finished on 113000/270896 queries. users per second: 3229.37"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 114000/270896 queries. users per second: 3229.47</pre>"
      ],
      "text/plain": [
       "recommendations finished on 114000/270896 queries. users per second: 3229.47"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 115000/270896 queries. users per second: 3229.73</pre>"
      ],
      "text/plain": [
       "recommendations finished on 115000/270896 queries. users per second: 3229.73"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 116000/270896 queries. users per second: 3229.86</pre>"
      ],
      "text/plain": [
       "recommendations finished on 116000/270896 queries. users per second: 3229.86"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 117000/270896 queries. users per second: 3230.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 117000/270896 queries. users per second: 3230.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 118000/270896 queries. users per second: 3230.42</pre>"
      ],
      "text/plain": [
       "recommendations finished on 118000/270896 queries. users per second: 3230.42"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 119000/270896 queries. users per second: 3230.84</pre>"
      ],
      "text/plain": [
       "recommendations finished on 119000/270896 queries. users per second: 3230.84"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 120000/270896 queries. users per second: 3231.17</pre>"
      ],
      "text/plain": [
       "recommendations finished on 120000/270896 queries. users per second: 3231.17"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 121000/270896 queries. users per second: 3231.25</pre>"
      ],
      "text/plain": [
       "recommendations finished on 121000/270896 queries. users per second: 3231.25"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 122000/270896 queries. users per second: 3231.68</pre>"
      ],
      "text/plain": [
       "recommendations finished on 122000/270896 queries. users per second: 3231.68"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 123000/270896 queries. users per second: 3231.95</pre>"
      ],
      "text/plain": [
       "recommendations finished on 123000/270896 queries. users per second: 3231.95"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 124000/270896 queries. users per second: 3231.76</pre>"
      ],
      "text/plain": [
       "recommendations finished on 124000/270896 queries. users per second: 3231.76"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 125000/270896 queries. users per second: 3231.97</pre>"
      ],
      "text/plain": [
       "recommendations finished on 125000/270896 queries. users per second: 3231.97"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 126000/270896 queries. users per second: 3232.13</pre>"
      ],
      "text/plain": [
       "recommendations finished on 126000/270896 queries. users per second: 3232.13"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 127000/270896 queries. users per second: 3232.26</pre>"
      ],
      "text/plain": [
       "recommendations finished on 127000/270896 queries. users per second: 3232.26"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 128000/270896 queries. users per second: 3232.41</pre>"
      ],
      "text/plain": [
       "recommendations finished on 128000/270896 queries. users per second: 3232.41"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 129000/270896 queries. users per second: 3232.86</pre>"
      ],
      "text/plain": [
       "recommendations finished on 129000/270896 queries. users per second: 3232.86"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 130000/270896 queries. users per second: 3232.84</pre>"
      ],
      "text/plain": [
       "recommendations finished on 130000/270896 queries. users per second: 3232.84"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 131000/270896 queries. users per second: 3233.09</pre>"
      ],
      "text/plain": [
       "recommendations finished on 131000/270896 queries. users per second: 3233.09"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 132000/270896 queries. users per second: 3233.26</pre>"
      ],
      "text/plain": [
       "recommendations finished on 132000/270896 queries. users per second: 3233.26"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 133000/270896 queries. users per second: 3233.59</pre>"
      ],
      "text/plain": [
       "recommendations finished on 133000/270896 queries. users per second: 3233.59"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 134000/270896 queries. users per second: 3232.27</pre>"
      ],
      "text/plain": [
       "recommendations finished on 134000/270896 queries. users per second: 3232.27"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 135000/270896 queries. users per second: 3232.55</pre>"
      ],
      "text/plain": [
       "recommendations finished on 135000/270896 queries. users per second: 3232.55"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 136000/270896 queries. users per second: 3232.95</pre>"
      ],
      "text/plain": [
       "recommendations finished on 136000/270896 queries. users per second: 3232.95"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 137000/270896 queries. users per second: 3233.03</pre>"
      ],
      "text/plain": [
       "recommendations finished on 137000/270896 queries. users per second: 3233.03"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 138000/270896 queries. users per second: 3233.27</pre>"
      ],
      "text/plain": [
       "recommendations finished on 138000/270896 queries. users per second: 3233.27"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 139000/270896 queries. users per second: 3233.53</pre>"
      ],
      "text/plain": [
       "recommendations finished on 139000/270896 queries. users per second: 3233.53"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 140000/270896 queries. users per second: 3233.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 140000/270896 queries. users per second: 3233.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 141000/270896 queries. users per second: 3233.87</pre>"
      ],
      "text/plain": [
       "recommendations finished on 141000/270896 queries. users per second: 3233.87"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 142000/270896 queries. users per second: 3233.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 142000/270896 queries. users per second: 3233.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 143000/270896 queries. users per second: 3233.66</pre>"
      ],
      "text/plain": [
       "recommendations finished on 143000/270896 queries. users per second: 3233.66"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 144000/270896 queries. users per second: 3233.47</pre>"
      ],
      "text/plain": [
       "recommendations finished on 144000/270896 queries. users per second: 3233.47"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 145000/270896 queries. users per second: 3233.74</pre>"
      ],
      "text/plain": [
       "recommendations finished on 145000/270896 queries. users per second: 3233.74"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 146000/270896 queries. users per second: 3233.94</pre>"
      ],
      "text/plain": [
       "recommendations finished on 146000/270896 queries. users per second: 3233.94"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 147000/270896 queries. users per second: 3233.91</pre>"
      ],
      "text/plain": [
       "recommendations finished on 147000/270896 queries. users per second: 3233.91"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 148000/270896 queries. users per second: 3234.21</pre>"
      ],
      "text/plain": [
       "recommendations finished on 148000/270896 queries. users per second: 3234.21"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 149000/270896 queries. users per second: 3234.44</pre>"
      ],
      "text/plain": [
       "recommendations finished on 149000/270896 queries. users per second: 3234.44"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 150000/270896 queries. users per second: 3234.53</pre>"
      ],
      "text/plain": [
       "recommendations finished on 150000/270896 queries. users per second: 3234.53"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 151000/270896 queries. users per second: 3234.79</pre>"
      ],
      "text/plain": [
       "recommendations finished on 151000/270896 queries. users per second: 3234.79"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 152000/270896 queries. users per second: 3235.08</pre>"
      ],
      "text/plain": [
       "recommendations finished on 152000/270896 queries. users per second: 3235.08"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 153000/270896 queries. users per second: 3235.17</pre>"
      ],
      "text/plain": [
       "recommendations finished on 153000/270896 queries. users per second: 3235.17"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 154000/270896 queries. users per second: 3235.41</pre>"
      ],
      "text/plain": [
       "recommendations finished on 154000/270896 queries. users per second: 3235.41"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 155000/270896 queries. users per second: 3235.73</pre>"
      ],
      "text/plain": [
       "recommendations finished on 155000/270896 queries. users per second: 3235.73"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 156000/270896 queries. users per second: 3235.66</pre>"
      ],
      "text/plain": [
       "recommendations finished on 156000/270896 queries. users per second: 3235.66"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 157000/270896 queries. users per second: 3235.93</pre>"
      ],
      "text/plain": [
       "recommendations finished on 157000/270896 queries. users per second: 3235.93"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 158000/270896 queries. users per second: 3236.04</pre>"
      ],
      "text/plain": [
       "recommendations finished on 158000/270896 queries. users per second: 3236.04"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 159000/270896 queries. users per second: 3236.21</pre>"
      ],
      "text/plain": [
       "recommendations finished on 159000/270896 queries. users per second: 3236.21"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 160000/270896 queries. users per second: 3236.27</pre>"
      ],
      "text/plain": [
       "recommendations finished on 160000/270896 queries. users per second: 3236.27"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 161000/270896 queries. users per second: 3236.47</pre>"
      ],
      "text/plain": [
       "recommendations finished on 161000/270896 queries. users per second: 3236.47"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 162000/270896 queries. users per second: 3236.72</pre>"
      ],
      "text/plain": [
       "recommendations finished on 162000/270896 queries. users per second: 3236.72"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 163000/270896 queries. users per second: 3236.63</pre>"
      ],
      "text/plain": [
       "recommendations finished on 163000/270896 queries. users per second: 3236.63"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 164000/270896 queries. users per second: 3236.64</pre>"
      ],
      "text/plain": [
       "recommendations finished on 164000/270896 queries. users per second: 3236.64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 165000/270896 queries. users per second: 3236.65</pre>"
      ],
      "text/plain": [
       "recommendations finished on 165000/270896 queries. users per second: 3236.65"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 166000/270896 queries. users per second: 3236.72</pre>"
      ],
      "text/plain": [
       "recommendations finished on 166000/270896 queries. users per second: 3236.72"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 167000/270896 queries. users per second: 3236.99</pre>"
      ],
      "text/plain": [
       "recommendations finished on 167000/270896 queries. users per second: 3236.99"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 168000/270896 queries. users per second: 3237.01</pre>"
      ],
      "text/plain": [
       "recommendations finished on 168000/270896 queries. users per second: 3237.01"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 169000/270896 queries. users per second: 3237.21</pre>"
      ],
      "text/plain": [
       "recommendations finished on 169000/270896 queries. users per second: 3237.21"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 170000/270896 queries. users per second: 3237.26</pre>"
      ],
      "text/plain": [
       "recommendations finished on 170000/270896 queries. users per second: 3237.26"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 171000/270896 queries. users per second: 3237.46</pre>"
      ],
      "text/plain": [
       "recommendations finished on 171000/270896 queries. users per second: 3237.46"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 172000/270896 queries. users per second: 3237.68</pre>"
      ],
      "text/plain": [
       "recommendations finished on 172000/270896 queries. users per second: 3237.68"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 173000/270896 queries. users per second: 3237.69</pre>"
      ],
      "text/plain": [
       "recommendations finished on 173000/270896 queries. users per second: 3237.69"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 174000/270896 queries. users per second: 3237.96</pre>"
      ],
      "text/plain": [
       "recommendations finished on 174000/270896 queries. users per second: 3237.96"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 175000/270896 queries. users per second: 3238.09</pre>"
      ],
      "text/plain": [
       "recommendations finished on 175000/270896 queries. users per second: 3238.09"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 176000/270896 queries. users per second: 3237.48</pre>"
      ],
      "text/plain": [
       "recommendations finished on 176000/270896 queries. users per second: 3237.48"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 177000/270896 queries. users per second: 3237.58</pre>"
      ],
      "text/plain": [
       "recommendations finished on 177000/270896 queries. users per second: 3237.58"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 178000/270896 queries. users per second: 3237.64</pre>"
      ],
      "text/plain": [
       "recommendations finished on 178000/270896 queries. users per second: 3237.64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 179000/270896 queries. users per second: 3237.59</pre>"
      ],
      "text/plain": [
       "recommendations finished on 179000/270896 queries. users per second: 3237.59"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 180000/270896 queries. users per second: 3237.65</pre>"
      ],
      "text/plain": [
       "recommendations finished on 180000/270896 queries. users per second: 3237.65"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 181000/270896 queries. users per second: 3237.41</pre>"
      ],
      "text/plain": [
       "recommendations finished on 181000/270896 queries. users per second: 3237.41"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 182000/270896 queries. users per second: 3237.56</pre>"
      ],
      "text/plain": [
       "recommendations finished on 182000/270896 queries. users per second: 3237.56"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 183000/270896 queries. users per second: 3237.67</pre>"
      ],
      "text/plain": [
       "recommendations finished on 183000/270896 queries. users per second: 3237.67"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 184000/270896 queries. users per second: 3237.81</pre>"
      ],
      "text/plain": [
       "recommendations finished on 184000/270896 queries. users per second: 3237.81"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 185000/270896 queries. users per second: 3237.89</pre>"
      ],
      "text/plain": [
       "recommendations finished on 185000/270896 queries. users per second: 3237.89"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 186000/270896 queries. users per second: 3237.87</pre>"
      ],
      "text/plain": [
       "recommendations finished on 186000/270896 queries. users per second: 3237.87"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 187000/270896 queries. users per second: 3238.04</pre>"
      ],
      "text/plain": [
       "recommendations finished on 187000/270896 queries. users per second: 3238.04"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 188000/270896 queries. users per second: 3238.32</pre>"
      ],
      "text/plain": [
       "recommendations finished on 188000/270896 queries. users per second: 3238.32"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 189000/270896 queries. users per second: 3238.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 189000/270896 queries. users per second: 3238.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 190000/270896 queries. users per second: 3238.36</pre>"
      ],
      "text/plain": [
       "recommendations finished on 190000/270896 queries. users per second: 3238.36"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 191000/270896 queries. users per second: 3238.48</pre>"
      ],
      "text/plain": [
       "recommendations finished on 191000/270896 queries. users per second: 3238.48"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 192000/270896 queries. users per second: 3238.49</pre>"
      ],
      "text/plain": [
       "recommendations finished on 192000/270896 queries. users per second: 3238.49"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 193000/270896 queries. users per second: 3238.53</pre>"
      ],
      "text/plain": [
       "recommendations finished on 193000/270896 queries. users per second: 3238.53"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 194000/270896 queries. users per second: 3238.62</pre>"
      ],
      "text/plain": [
       "recommendations finished on 194000/270896 queries. users per second: 3238.62"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 195000/270896 queries. users per second: 3238.62</pre>"
      ],
      "text/plain": [
       "recommendations finished on 195000/270896 queries. users per second: 3238.62"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 196000/270896 queries. users per second: 3238.62</pre>"
      ],
      "text/plain": [
       "recommendations finished on 196000/270896 queries. users per second: 3238.62"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 197000/270896 queries. users per second: 3238.67</pre>"
      ],
      "text/plain": [
       "recommendations finished on 197000/270896 queries. users per second: 3238.67"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 198000/270896 queries. users per second: 3238.82</pre>"
      ],
      "text/plain": [
       "recommendations finished on 198000/270896 queries. users per second: 3238.82"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 199000/270896 queries. users per second: 3238.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 199000/270896 queries. users per second: 3238.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 200000/270896 queries. users per second: 3238.87</pre>"
      ],
      "text/plain": [
       "recommendations finished on 200000/270896 queries. users per second: 3238.87"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 201000/270896 queries. users per second: 3239.01</pre>"
      ],
      "text/plain": [
       "recommendations finished on 201000/270896 queries. users per second: 3239.01"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 202000/270896 queries. users per second: 3239.02</pre>"
      ],
      "text/plain": [
       "recommendations finished on 202000/270896 queries. users per second: 3239.02"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 203000/270896 queries. users per second: 3239.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 203000/270896 queries. users per second: 3239.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 204000/270896 queries. users per second: 3239.34</pre>"
      ],
      "text/plain": [
       "recommendations finished on 204000/270896 queries. users per second: 3239.34"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 205000/270896 queries. users per second: 3239.26</pre>"
      ],
      "text/plain": [
       "recommendations finished on 205000/270896 queries. users per second: 3239.26"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 206000/270896 queries. users per second: 3239.38</pre>"
      ],
      "text/plain": [
       "recommendations finished on 206000/270896 queries. users per second: 3239.38"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 207000/270896 queries. users per second: 3239.44</pre>"
      ],
      "text/plain": [
       "recommendations finished on 207000/270896 queries. users per second: 3239.44"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 208000/270896 queries. users per second: 3239.43</pre>"
      ],
      "text/plain": [
       "recommendations finished on 208000/270896 queries. users per second: 3239.43"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 209000/270896 queries. users per second: 3239.44</pre>"
      ],
      "text/plain": [
       "recommendations finished on 209000/270896 queries. users per second: 3239.44"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 210000/270896 queries. users per second: 3239.67</pre>"
      ],
      "text/plain": [
       "recommendations finished on 210000/270896 queries. users per second: 3239.67"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 211000/270896 queries. users per second: 3239.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 211000/270896 queries. users per second: 3239.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 212000/270896 queries. users per second: 3239.57</pre>"
      ],
      "text/plain": [
       "recommendations finished on 212000/270896 queries. users per second: 3239.57"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 213000/270896 queries. users per second: 3239.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 213000/270896 queries. users per second: 3239.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 214000/270896 queries. users per second: 3239.53</pre>"
      ],
      "text/plain": [
       "recommendations finished on 214000/270896 queries. users per second: 3239.53"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 215000/270896 queries. users per second: 3239.53</pre>"
      ],
      "text/plain": [
       "recommendations finished on 215000/270896 queries. users per second: 3239.53"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 216000/270896 queries. users per second: 3239.57</pre>"
      ],
      "text/plain": [
       "recommendations finished on 216000/270896 queries. users per second: 3239.57"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 217000/270896 queries. users per second: 3239.76</pre>"
      ],
      "text/plain": [
       "recommendations finished on 217000/270896 queries. users per second: 3239.76"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 218000/270896 queries. users per second: 3239.78</pre>"
      ],
      "text/plain": [
       "recommendations finished on 218000/270896 queries. users per second: 3239.78"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 219000/270896 queries. users per second: 3239.58</pre>"
      ],
      "text/plain": [
       "recommendations finished on 219000/270896 queries. users per second: 3239.58"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 220000/270896 queries. users per second: 3239.52</pre>"
      ],
      "text/plain": [
       "recommendations finished on 220000/270896 queries. users per second: 3239.52"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 221000/270896 queries. users per second: 3239.43</pre>"
      ],
      "text/plain": [
       "recommendations finished on 221000/270896 queries. users per second: 3239.43"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 222000/270896 queries. users per second: 3239.39</pre>"
      ],
      "text/plain": [
       "recommendations finished on 222000/270896 queries. users per second: 3239.39"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 223000/270896 queries. users per second: 3239.32</pre>"
      ],
      "text/plain": [
       "recommendations finished on 223000/270896 queries. users per second: 3239.32"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 224000/270896 queries. users per second: 3239.23</pre>"
      ],
      "text/plain": [
       "recommendations finished on 224000/270896 queries. users per second: 3239.23"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 225000/270896 queries. users per second: 3239.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 225000/270896 queries. users per second: 3239.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 226000/270896 queries. users per second: 3238.95</pre>"
      ],
      "text/plain": [
       "recommendations finished on 226000/270896 queries. users per second: 3238.95"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 227000/270896 queries. users per second: 3238.64</pre>"
      ],
      "text/plain": [
       "recommendations finished on 227000/270896 queries. users per second: 3238.64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 228000/270896 queries. users per second: 3238.62</pre>"
      ],
      "text/plain": [
       "recommendations finished on 228000/270896 queries. users per second: 3238.62"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 229000/270896 queries. users per second: 3238.43</pre>"
      ],
      "text/plain": [
       "recommendations finished on 229000/270896 queries. users per second: 3238.43"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 230000/270896 queries. users per second: 3238.55</pre>"
      ],
      "text/plain": [
       "recommendations finished on 230000/270896 queries. users per second: 3238.55"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 231000/270896 queries. users per second: 3238.54</pre>"
      ],
      "text/plain": [
       "recommendations finished on 231000/270896 queries. users per second: 3238.54"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 232000/270896 queries. users per second: 3238.57</pre>"
      ],
      "text/plain": [
       "recommendations finished on 232000/270896 queries. users per second: 3238.57"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 233000/270896 queries. users per second: 3238.65</pre>"
      ],
      "text/plain": [
       "recommendations finished on 233000/270896 queries. users per second: 3238.65"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 234000/270896 queries. users per second: 3238.52</pre>"
      ],
      "text/plain": [
       "recommendations finished on 234000/270896 queries. users per second: 3238.52"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 235000/270896 queries. users per second: 3238.01</pre>"
      ],
      "text/plain": [
       "recommendations finished on 235000/270896 queries. users per second: 3238.01"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 236000/270896 queries. users per second: 3237.95</pre>"
      ],
      "text/plain": [
       "recommendations finished on 236000/270896 queries. users per second: 3237.95"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 237000/270896 queries. users per second: 3237.93</pre>"
      ],
      "text/plain": [
       "recommendations finished on 237000/270896 queries. users per second: 3237.93"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 238000/270896 queries. users per second: 3237.94</pre>"
      ],
      "text/plain": [
       "recommendations finished on 238000/270896 queries. users per second: 3237.94"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 239000/270896 queries. users per second: 3237.93</pre>"
      ],
      "text/plain": [
       "recommendations finished on 239000/270896 queries. users per second: 3237.93"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 240000/270896 queries. users per second: 3237.97</pre>"
      ],
      "text/plain": [
       "recommendations finished on 240000/270896 queries. users per second: 3237.97"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 241000/270896 queries. users per second: 3237.98</pre>"
      ],
      "text/plain": [
       "recommendations finished on 241000/270896 queries. users per second: 3237.98"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 242000/270896 queries. users per second: 3238.04</pre>"
      ],
      "text/plain": [
       "recommendations finished on 242000/270896 queries. users per second: 3238.04"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 243000/270896 queries. users per second: 3238.14</pre>"
      ],
      "text/plain": [
       "recommendations finished on 243000/270896 queries. users per second: 3238.14"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 244000/270896 queries. users per second: 3238.11</pre>"
      ],
      "text/plain": [
       "recommendations finished on 244000/270896 queries. users per second: 3238.11"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 245000/270896 queries. users per second: 3238.15</pre>"
      ],
      "text/plain": [
       "recommendations finished on 245000/270896 queries. users per second: 3238.15"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 246000/270896 queries. users per second: 3237.34</pre>"
      ],
      "text/plain": [
       "recommendations finished on 246000/270896 queries. users per second: 3237.34"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 247000/270896 queries. users per second: 3237.29</pre>"
      ],
      "text/plain": [
       "recommendations finished on 247000/270896 queries. users per second: 3237.29"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 248000/270896 queries. users per second: 3237.17</pre>"
      ],
      "text/plain": [
       "recommendations finished on 248000/270896 queries. users per second: 3237.17"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 249000/270896 queries. users per second: 3237.29</pre>"
      ],
      "text/plain": [
       "recommendations finished on 249000/270896 queries. users per second: 3237.29"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 250000/270896 queries. users per second: 3237.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 250000/270896 queries. users per second: 3237.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 251000/270896 queries. users per second: 3237.38</pre>"
      ],
      "text/plain": [
       "recommendations finished on 251000/270896 queries. users per second: 3237.38"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 252000/270896 queries. users per second: 3237.46</pre>"
      ],
      "text/plain": [
       "recommendations finished on 252000/270896 queries. users per second: 3237.46"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 253000/270896 queries. users per second: 3237.56</pre>"
      ],
      "text/plain": [
       "recommendations finished on 253000/270896 queries. users per second: 3237.56"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 254000/270896 queries. users per second: 3237.55</pre>"
      ],
      "text/plain": [
       "recommendations finished on 254000/270896 queries. users per second: 3237.55"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 255000/270896 queries. users per second: 3237.65</pre>"
      ],
      "text/plain": [
       "recommendations finished on 255000/270896 queries. users per second: 3237.65"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 256000/270896 queries. users per second: 3237.75</pre>"
      ],
      "text/plain": [
       "recommendations finished on 256000/270896 queries. users per second: 3237.75"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 257000/270896 queries. users per second: 3237.42</pre>"
      ],
      "text/plain": [
       "recommendations finished on 257000/270896 queries. users per second: 3237.42"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 258000/270896 queries. users per second: 3237.34</pre>"
      ],
      "text/plain": [
       "recommendations finished on 258000/270896 queries. users per second: 3237.34"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 259000/270896 queries. users per second: 3237.42</pre>"
      ],
      "text/plain": [
       "recommendations finished on 259000/270896 queries. users per second: 3237.42"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 260000/270896 queries. users per second: 3237.42</pre>"
      ],
      "text/plain": [
       "recommendations finished on 260000/270896 queries. users per second: 3237.42"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 261000/270896 queries. users per second: 3237.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 261000/270896 queries. users per second: 3237.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 262000/270896 queries. users per second: 3237.07</pre>"
      ],
      "text/plain": [
       "recommendations finished on 262000/270896 queries. users per second: 3237.07"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 263000/270896 queries. users per second: 3236.62</pre>"
      ],
      "text/plain": [
       "recommendations finished on 263000/270896 queries. users per second: 3236.62"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 264000/270896 queries. users per second: 3236.25</pre>"
      ],
      "text/plain": [
       "recommendations finished on 264000/270896 queries. users per second: 3236.25"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 265000/270896 queries. users per second: 3235.91</pre>"
      ],
      "text/plain": [
       "recommendations finished on 265000/270896 queries. users per second: 3235.91"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 266000/270896 queries. users per second: 3235.25</pre>"
      ],
      "text/plain": [
       "recommendations finished on 266000/270896 queries. users per second: 3235.25"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 267000/270896 queries. users per second: 3234.31</pre>"
      ],
      "text/plain": [
       "recommendations finished on 267000/270896 queries. users per second: 3234.31"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 268000/270896 queries. users per second: 3233.07</pre>"
      ],
      "text/plain": [
       "recommendations finished on 268000/270896 queries. users per second: 3233.07"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 269000/270896 queries. users per second: 3230.46</pre>"
      ],
      "text/plain": [
       "recommendations finished on 269000/270896 queries. users per second: 3230.46"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 270000/270896 queries. users per second: 3223.94</pre>"
      ],
      "text/plain": [
       "recommendations finished on 270000/270896 queries. users per second: 3223.94"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "----------------------------------------------------\n",
      "Cell Processing Time\n",
      "CPU times: user 1h 54min 19s, sys: 1min 6s, total: 1h 55min 26s\n",
      "Wall time: 7min 57s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "data = tc.SFrame(data=ratings)\n",
    "\n",
    "model = tc.recommender.create(data, user_id=\"userId\", item_id=\"movieId\", target=\"rating\")\n",
    "results = model.recommend(users=None, k=5)\n",
    "model.save(\"my_model\")\n",
    "\n",
    "print(timebreak)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\"><table frame=\"box\" rules=\"cols\">\n",
       "    <tr>\n",
       "        <th style=\"padding-left: 1em; padding-right: 1em; text-align: center\">userId</th>\n",
       "        <th style=\"padding-left: 1em; padding-right: 1em; text-align: center\">movieId</th>\n",
       "        <th style=\"padding-left: 1em; padding-right: 1em; text-align: center\">score</th>\n",
       "        <th style=\"padding-left: 1em; padding-right: 1em; text-align: center\">rank</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">1</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">318</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">5.149854127623358</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">1</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">50</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">5.015436720408716</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">1</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">527</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">4.961953211881437</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">1</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">296</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">4.9530253897684</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">1</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">1193</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">4.905803341724195</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">2</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">318</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">5.436264362491884</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">2</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">50</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">5.278720673479357</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">2</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">858</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">5.2698624248879335</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">2</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">527</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">5.257744264163294</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">2</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">1221</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">5.157529842414179</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">5</td>\n",
       "    </tr>\n",
       "</table>\n",
       "[1354480 rows x 4 columns]<br/>Note: Only the head of the SFrame is printed.<br/>You can use print_rows(num_rows=m, num_columns=n) to print more rows and columns.\n",
       "</div>"
      ],
      "text/plain": [
       "Columns:\n",
       "\tuserId\tint\n",
       "\tmovieId\tint\n",
       "\tscore\tfloat\n",
       "\trank\tint\n",
       "\n",
       "Rows: 1354480\n",
       "\n",
       "Data:\n",
       "+--------+---------+--------------------+------+\n",
       "| userId | movieId |       score        | rank |\n",
       "+--------+---------+--------------------+------+\n",
       "|   1    |   318   | 5.149854127623358  |  1   |\n",
       "|   1    |    50   | 5.015436720408716  |  2   |\n",
       "|   1    |   527   | 4.961953211881437  |  3   |\n",
       "|   1    |   296   |  4.9530253897684   |  4   |\n",
       "|   1    |   1193  | 4.905803341724195  |  5   |\n",
       "|   2    |   318   | 5.436264362491884  |  1   |\n",
       "|   2    |    50   | 5.278720673479357  |  2   |\n",
       "|   2    |   858   | 5.2698624248879335 |  3   |\n",
       "|   2    |   527   | 5.257744264163294  |  4   |\n",
       "|   2    |   1221  | 5.157529842414179  |  5   |\n",
       "+--------+---------+--------------------+------+\n",
       "[1354480 rows x 4 columns]\n",
       "Note: Only the head of the SFrame is printed.\n",
       "You can use print_rows(num_rows=m, num_columns=n) to print more rows and columns."
      ]
     },
     "execution_count": 232,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>Preparing data set.</pre>"
      ],
      "text/plain": [
       "Preparing data set."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>    Data has 8396130 observations with 260134 users and 1672 items.</pre>"
      ],
      "text/plain": [
       "    Data has 8396130 observations with 260134 users and 1672 items."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>    Data prepared in: 3.88144s</pre>"
      ],
      "text/plain": [
       "    Data prepared in: 3.88144s"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>Training ranking_factorization_recommender for recommendations.</pre>"
      ],
      "text/plain": [
       "Training ranking_factorization_recommender for recommendations."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+--------------------------------+--------------------------------------------------+----------+</pre>"
      ],
      "text/plain": [
       "+--------------------------------+--------------------------------------------------+----------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| Parameter                      | Description                                      | Value    |</pre>"
      ],
      "text/plain": [
       "| Parameter                      | Description                                      | Value    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+--------------------------------+--------------------------------------------------+----------+</pre>"
      ],
      "text/plain": [
       "+--------------------------------+--------------------------------------------------+----------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| num_factors                    | Factor Dimension                                 | 32       |</pre>"
      ],
      "text/plain": [
       "| num_factors                    | Factor Dimension                                 | 32       |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| regularization                 | L2 Regularization on Factors                     | 1e-09    |</pre>"
      ],
      "text/plain": [
       "| regularization                 | L2 Regularization on Factors                     | 1e-09    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| solver                         | Solver used for training                         | adagrad  |</pre>"
      ],
      "text/plain": [
       "| solver                         | Solver used for training                         | adagrad  |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| linear_regularization          | L2 Regularization on Linear Coefficients         | 1e-09    |</pre>"
      ],
      "text/plain": [
       "| linear_regularization          | L2 Regularization on Linear Coefficients         | 1e-09    |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| ranking_regularization         | Rank-based Regularization Weight                 | 0.25     |</pre>"
      ],
      "text/plain": [
       "| ranking_regularization         | Rank-based Regularization Weight                 | 0.25     |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| max_iterations                 | Maximum Number of Iterations                     | 25       |</pre>"
      ],
      "text/plain": [
       "| max_iterations                 | Maximum Number of Iterations                     | 25       |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+--------------------------------+--------------------------------------------------+----------+</pre>"
      ],
      "text/plain": [
       "+--------------------------------+--------------------------------------------------+----------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>  Optimizing model using SGD; tuning step size.</pre>"
      ],
      "text/plain": [
       "  Optimizing model using SGD; tuning step size."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>  Using 1049516 / 8396130 points for tuning the step size.</pre>"
      ],
      "text/plain": [
       "  Using 1049516 / 8396130 points for tuning the step size."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+---------+-------------------+------------------------------------------+</pre>"
      ],
      "text/plain": [
       "+---------+-------------------+------------------------------------------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| Attempt | Initial Step Size | Estimated Objective Value                |</pre>"
      ],
      "text/plain": [
       "| Attempt | Initial Step Size | Estimated Objective Value                |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+---------+-------------------+------------------------------------------+</pre>"
      ],
      "text/plain": [
       "+---------+-------------------+------------------------------------------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 0       | 12.5              | Not Viable                               |</pre>"
      ],
      "text/plain": [
       "| 0       | 12.5              | Not Viable                               |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 1       | 3.125             | Not Viable                               |</pre>"
      ],
      "text/plain": [
       "| 1       | 3.125             | Not Viable                               |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 2       | 0.78125           | 1.66093                                  |</pre>"
      ],
      "text/plain": [
       "| 2       | 0.78125           | 1.66093                                  |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 3       | 0.390625          | 0.413884                                 |</pre>"
      ],
      "text/plain": [
       "| 3       | 0.390625          | 0.413884                                 |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 4       | 0.195312          | 0.0981463                                |</pre>"
      ],
      "text/plain": [
       "| 4       | 0.195312          | 0.0981463                                |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 5       | 0.0976562         | 0.0847623                                |</pre>"
      ],
      "text/plain": [
       "| 5       | 0.0976562         | 0.0847623                                |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 6       | 0.0488281         | 0.135411                                 |</pre>"
      ],
      "text/plain": [
       "| 6       | 0.0488281         | 0.135411                                 |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 7       | 0.0244141         | 0.27426                                  |</pre>"
      ],
      "text/plain": [
       "| 7       | 0.0244141         | 0.27426                                  |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+---------+-------------------+------------------------------------------+</pre>"
      ],
      "text/plain": [
       "+---------+-------------------+------------------------------------------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| Final   | 0.0976562         | 0.0847623                                |</pre>"
      ],
      "text/plain": [
       "| Final   | 0.0976562         | 0.0847623                                |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+---------+-------------------+------------------------------------------+</pre>"
      ],
      "text/plain": [
       "+---------+-------------------+------------------------------------------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>Starting Optimization.</pre>"
      ],
      "text/plain": [
       "Starting Optimization."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+---------+--------------+-------------------+-----------------------+-------------+</pre>"
      ],
      "text/plain": [
       "+---------+--------------+-------------------+-----------------------+-------------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| Iter.   | Elapsed Time | Approx. Objective | Approx. Training RMSE | Step Size   |</pre>"
      ],
      "text/plain": [
       "| Iter.   | Elapsed Time | Approx. Objective | Approx. Training RMSE | Step Size   |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+---------+--------------+-------------------+-----------------------+-------------+</pre>"
      ],
      "text/plain": [
       "+---------+--------------+-------------------+-----------------------+-------------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| Initial | 132us        | 2.39361           | 1.10489               |             |</pre>"
      ],
      "text/plain": [
       "| Initial | 132us        | 2.39361           | 1.10489               |             |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+---------+--------------+-------------------+-----------------------+-------------+</pre>"
      ],
      "text/plain": [
       "+---------+--------------+-------------------+-----------------------+-------------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 1       | 3.61s        | 0.904872          | 0.908941              | 0.0976562   |</pre>"
      ],
      "text/plain": [
       "| 1       | 3.61s        | 0.904872          | 0.908941              | 0.0976562   |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 2       | 6.43s        | 0.497252          | 0.687727              | 0.0976562   |</pre>"
      ],
      "text/plain": [
       "| 2       | 6.43s        | 0.497252          | 0.687727              | 0.0976562   |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 3       | 9.22s        | 0.398681          | 0.62126               | 0.0976562   |</pre>"
      ],
      "text/plain": [
       "| 3       | 9.22s        | 0.398681          | 0.62126               | 0.0976562   |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 4       | 11.96s       | 0.358747          | 0.591049              | 0.0976562   |</pre>"
      ],
      "text/plain": [
       "| 4       | 11.96s       | 0.358747          | 0.591049              | 0.0976562   |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 5       | 14.68s       | 0.336812          | 0.573552              | 0.0976562   |</pre>"
      ],
      "text/plain": [
       "| 5       | 14.68s       | 0.336812          | 0.573552              | 0.0976562   |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 10      | 27.96s       | 0.29578           | 0.538564              | 0.0976562   |</pre>"
      ],
      "text/plain": [
       "| 10      | 27.96s       | 0.29578           | 0.538564              | 0.0976562   |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 15      | 41.46s       | 0.281365          | 0.525641              | 0.0976562   |</pre>"
      ],
      "text/plain": [
       "| 15      | 41.46s       | 0.281365          | 0.525641              | 0.0976562   |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 20      | 54.44s       | 0.273536          | 0.518399              | 0.0976562   |</pre>"
      ],
      "text/plain": [
       "| 20      | 54.44s       | 0.273536          | 0.518399              | 0.0976562   |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>| 25      | 1m 7s        | 0.268392          | 0.513597              | 0.0976562   |</pre>"
      ],
      "text/plain": [
       "| 25      | 1m 7s        | 0.268392          | 0.513597              | 0.0976562   |"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>+---------+--------------+-------------------+-----------------------+-------------+</pre>"
      ],
      "text/plain": [
       "+---------+--------------+-------------------+-----------------------+-------------+"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>Optimization Complete: Maximum number of passes through the data reached.</pre>"
      ],
      "text/plain": [
       "Optimization Complete: Maximum number of passes through the data reached."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>Computing final objective value and training RMSE.</pre>"
      ],
      "text/plain": [
       "Computing final objective value and training RMSE."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>       Final objective value: 0.249404</pre>"
      ],
      "text/plain": [
       "       Final objective value: 0.249404"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>       Final training RMSE: 0.494751</pre>"
      ],
      "text/plain": [
       "       Final training RMSE: 0.494751"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 1000/260134 queries. users per second: 81281</pre>"
      ],
      "text/plain": [
       "recommendations finished on 1000/260134 queries. users per second: 81281"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 2000/260134 queries. users per second: 83028.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 2000/260134 queries. users per second: 83028.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 3000/260134 queries. users per second: 83979.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 3000/260134 queries. users per second: 83979.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 4000/260134 queries. users per second: 83234.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 4000/260134 queries. users per second: 83234.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 5000/260134 queries. users per second: 83564.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 5000/260134 queries. users per second: 83564.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 6000/260134 queries. users per second: 83638.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 6000/260134 queries. users per second: 83638.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 7000/260134 queries. users per second: 83157.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 7000/260134 queries. users per second: 83157.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 8000/260134 queries. users per second: 82911.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 8000/260134 queries. users per second: 82911.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 9000/260134 queries. users per second: 82941.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 9000/260134 queries. users per second: 82941.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 10000/260134 queries. users per second: 82852.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 10000/260134 queries. users per second: 82852.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 11000/260134 queries. users per second: 83055.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 11000/260134 queries. users per second: 83055.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 12000/260134 queries. users per second: 83034.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 12000/260134 queries. users per second: 83034.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 13000/260134 queries. users per second: 83082</pre>"
      ],
      "text/plain": [
       "recommendations finished on 13000/260134 queries. users per second: 83082"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 14000/260134 queries. users per second: 83274.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 14000/260134 queries. users per second: 83274.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 15000/260134 queries. users per second: 83300</pre>"
      ],
      "text/plain": [
       "recommendations finished on 15000/260134 queries. users per second: 83300"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 16000/260134 queries. users per second: 83379.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 16000/260134 queries. users per second: 83379.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 17000/260134 queries. users per second: 83496.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 17000/260134 queries. users per second: 83496.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 18000/260134 queries. users per second: 83476.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 18000/260134 queries. users per second: 83476.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 19000/260134 queries. users per second: 83585.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 19000/260134 queries. users per second: 83585.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 20000/260134 queries. users per second: 83670.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 20000/260134 queries. users per second: 83670.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 21000/260134 queries. users per second: 83712.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 21000/260134 queries. users per second: 83712.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 22000/260134 queries. users per second: 83827.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 22000/260134 queries. users per second: 83827.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 23000/260134 queries. users per second: 83803.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 23000/260134 queries. users per second: 83803.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 24000/260134 queries. users per second: 83773.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 24000/260134 queries. users per second: 83773.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 25000/260134 queries. users per second: 83768.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 25000/260134 queries. users per second: 83768.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 26000/260134 queries. users per second: 83838.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 26000/260134 queries. users per second: 83838.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 27000/260134 queries. users per second: 83779.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 27000/260134 queries. users per second: 83779.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 28000/260134 queries. users per second: 83811.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 28000/260134 queries. users per second: 83811.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 29000/260134 queries. users per second: 83857.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 29000/260134 queries. users per second: 83857.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 30000/260134 queries. users per second: 83805.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 30000/260134 queries. users per second: 83805.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 31000/260134 queries. users per second: 83885.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 31000/260134 queries. users per second: 83885.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 32000/260134 queries. users per second: 83935.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 32000/260134 queries. users per second: 83935.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 33000/260134 queries. users per second: 83838.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 33000/260134 queries. users per second: 83838.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 34000/260134 queries. users per second: 83700.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 34000/260134 queries. users per second: 83700.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 35000/260134 queries. users per second: 83641.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 35000/260134 queries. users per second: 83641.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 36000/260134 queries. users per second: 83654.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 36000/260134 queries. users per second: 83654.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 37000/260134 queries. users per second: 83672.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 37000/260134 queries. users per second: 83672.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 38000/260134 queries. users per second: 83675.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 38000/260134 queries. users per second: 83675.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 39000/260134 queries. users per second: 83666</pre>"
      ],
      "text/plain": [
       "recommendations finished on 39000/260134 queries. users per second: 83666"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 40000/260134 queries. users per second: 83577.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 40000/260134 queries. users per second: 83577.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 41000/260134 queries. users per second: 83550.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 41000/260134 queries. users per second: 83550.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 42000/260134 queries. users per second: 83584.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 42000/260134 queries. users per second: 83584.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 43000/260134 queries. users per second: 83664.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 43000/260134 queries. users per second: 83664.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 44000/260134 queries. users per second: 83624.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 44000/260134 queries. users per second: 83624.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 45000/260134 queries. users per second: 83704</pre>"
      ],
      "text/plain": [
       "recommendations finished on 45000/260134 queries. users per second: 83704"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 46000/260134 queries. users per second: 83751.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 46000/260134 queries. users per second: 83751.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 47000/260134 queries. users per second: 83776.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 47000/260134 queries. users per second: 83776.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 48000/260134 queries. users per second: 83882.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 48000/260134 queries. users per second: 83882.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 49000/260134 queries. users per second: 83970.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 49000/260134 queries. users per second: 83970.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 50000/260134 queries. users per second: 83936.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 50000/260134 queries. users per second: 83936.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 51000/260134 queries. users per second: 84033.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 51000/260134 queries. users per second: 84033.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 52000/260134 queries. users per second: 84116.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 52000/260134 queries. users per second: 84116.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 53000/260134 queries. users per second: 84121.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 53000/260134 queries. users per second: 84121.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 54000/260134 queries. users per second: 84197.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 54000/260134 queries. users per second: 84197.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 55000/260134 queries. users per second: 84256.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 55000/260134 queries. users per second: 84256.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 56000/260134 queries. users per second: 84290.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 56000/260134 queries. users per second: 84290.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 57000/260134 queries. users per second: 84336.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 57000/260134 queries. users per second: 84336.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 58000/260134 queries. users per second: 84419.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 58000/260134 queries. users per second: 84419.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 59000/260134 queries. users per second: 84421.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 59000/260134 queries. users per second: 84421.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 60000/260134 queries. users per second: 84502.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 60000/260134 queries. users per second: 84502.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 61000/260134 queries. users per second: 84540.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 61000/260134 queries. users per second: 84540.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 62000/260134 queries. users per second: 84526.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 62000/260134 queries. users per second: 84526.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 63000/260134 queries. users per second: 84577.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 63000/260134 queries. users per second: 84577.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 64000/260134 queries. users per second: 84607.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 64000/260134 queries. users per second: 84607.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 65000/260134 queries. users per second: 84587.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 65000/260134 queries. users per second: 84587.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 66000/260134 queries. users per second: 84643.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 66000/260134 queries. users per second: 84643.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 67000/260134 queries. users per second: 84705.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 67000/260134 queries. users per second: 84705.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 68000/260134 queries. users per second: 84694.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 68000/260134 queries. users per second: 84694.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 69000/260134 queries. users per second: 84716.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 69000/260134 queries. users per second: 84716.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 70000/260134 queries. users per second: 84766.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 70000/260134 queries. users per second: 84766.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 71000/260134 queries. users per second: 84777.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 71000/260134 queries. users per second: 84777.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 72000/260134 queries. users per second: 84828.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 72000/260134 queries. users per second: 84828.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 73000/260134 queries. users per second: 84854.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 73000/260134 queries. users per second: 84854.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 74000/260134 queries. users per second: 84877.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 74000/260134 queries. users per second: 84877.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 75000/260134 queries. users per second: 84924.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 75000/260134 queries. users per second: 84924.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 76000/260134 queries. users per second: 84980.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 76000/260134 queries. users per second: 84980.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 77000/260134 queries. users per second: 84987</pre>"
      ],
      "text/plain": [
       "recommendations finished on 77000/260134 queries. users per second: 84987"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 78000/260134 queries. users per second: 85032.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 78000/260134 queries. users per second: 85032.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 79000/260134 queries. users per second: 85063.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 79000/260134 queries. users per second: 85063.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 80000/260134 queries. users per second: 85054.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 80000/260134 queries. users per second: 85054.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 81000/260134 queries. users per second: 85101.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 81000/260134 queries. users per second: 85101.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 82000/260134 queries. users per second: 85154.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 82000/260134 queries. users per second: 85154.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 83000/260134 queries. users per second: 85168.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 83000/260134 queries. users per second: 85168.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 84000/260134 queries. users per second: 85187.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 84000/260134 queries. users per second: 85187.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 85000/260134 queries. users per second: 85221.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 85000/260134 queries. users per second: 85221.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 86000/260134 queries. users per second: 85160.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 86000/260134 queries. users per second: 85160.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 87000/260134 queries. users per second: 85187.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 87000/260134 queries. users per second: 85187.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 88000/260134 queries. users per second: 85180</pre>"
      ],
      "text/plain": [
       "recommendations finished on 88000/260134 queries. users per second: 85180"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 89000/260134 queries. users per second: 85207.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 89000/260134 queries. users per second: 85207.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 90000/260134 queries. users per second: 85257.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 90000/260134 queries. users per second: 85257.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 91000/260134 queries. users per second: 85252.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 91000/260134 queries. users per second: 85252.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 92000/260134 queries. users per second: 85253.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 92000/260134 queries. users per second: 85253.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 93000/260134 queries. users per second: 85283.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 93000/260134 queries. users per second: 85283.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 94000/260134 queries. users per second: 85288.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 94000/260134 queries. users per second: 85288.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 95000/260134 queries. users per second: 85321</pre>"
      ],
      "text/plain": [
       "recommendations finished on 95000/260134 queries. users per second: 85321"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 96000/260134 queries. users per second: 85349.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 96000/260134 queries. users per second: 85349.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 97000/260134 queries. users per second: 85352.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 97000/260134 queries. users per second: 85352.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 98000/260134 queries. users per second: 85372.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 98000/260134 queries. users per second: 85372.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 99000/260134 queries. users per second: 85413.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 99000/260134 queries. users per second: 85413.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 100000/260134 queries. users per second: 85403.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 100000/260134 queries. users per second: 85403.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 101000/260134 queries. users per second: 85399.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 101000/260134 queries. users per second: 85399.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 102000/260134 queries. users per second: 85423.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 102000/260134 queries. users per second: 85423.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 103000/260134 queries. users per second: 85407.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 103000/260134 queries. users per second: 85407.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 104000/260134 queries. users per second: 85417.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 104000/260134 queries. users per second: 85417.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 105000/260134 queries. users per second: 85439.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 105000/260134 queries. users per second: 85439.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 106000/260134 queries. users per second: 85431.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 106000/260134 queries. users per second: 85431.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 107000/260134 queries. users per second: 85463.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 107000/260134 queries. users per second: 85463.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 108000/260134 queries. users per second: 85468.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 108000/260134 queries. users per second: 85468.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 109000/260134 queries. users per second: 85445.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 109000/260134 queries. users per second: 85445.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 110000/260134 queries. users per second: 85468.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 110000/260134 queries. users per second: 85468.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 111000/260134 queries. users per second: 85495.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 111000/260134 queries. users per second: 85495.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 112000/260134 queries. users per second: 85506.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 112000/260134 queries. users per second: 85506.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 113000/260134 queries. users per second: 85533.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 113000/260134 queries. users per second: 85533.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 114000/260134 queries. users per second: 85555.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 114000/260134 queries. users per second: 85555.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 115000/260134 queries. users per second: 85543.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 115000/260134 queries. users per second: 85543.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 116000/260134 queries. users per second: 85550.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 116000/260134 queries. users per second: 85550.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 117000/260134 queries. users per second: 85578.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 117000/260134 queries. users per second: 85578.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 118000/260134 queries. users per second: 85558</pre>"
      ],
      "text/plain": [
       "recommendations finished on 118000/260134 queries. users per second: 85558"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 119000/260134 queries. users per second: 85590.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 119000/260134 queries. users per second: 85590.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 120000/260134 queries. users per second: 85583.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 120000/260134 queries. users per second: 85583.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 121000/260134 queries. users per second: 85547.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 121000/260134 queries. users per second: 85547.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 122000/260134 queries. users per second: 85576.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 122000/260134 queries. users per second: 85576.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 123000/260134 queries. users per second: 85601.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 123000/260134 queries. users per second: 85601.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 124000/260134 queries. users per second: 85591.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 124000/260134 queries. users per second: 85591.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 125000/260134 queries. users per second: 85599.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 125000/260134 queries. users per second: 85599.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 126000/260134 queries. users per second: 85571.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 126000/260134 queries. users per second: 85571.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 127000/260134 queries. users per second: 85543.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 127000/260134 queries. users per second: 85543.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 128000/260134 queries. users per second: 85570.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 128000/260134 queries. users per second: 85570.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 129000/260134 queries. users per second: 85581.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 129000/260134 queries. users per second: 85581.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 130000/260134 queries. users per second: 85566.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 130000/260134 queries. users per second: 85566.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 131000/260134 queries. users per second: 85588.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 131000/260134 queries. users per second: 85588.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 132000/260134 queries. users per second: 85611.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 132000/260134 queries. users per second: 85611.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 133000/260134 queries. users per second: 85613.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 133000/260134 queries. users per second: 85613.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 134000/260134 queries. users per second: 85638.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 134000/260134 queries. users per second: 85638.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 135000/260134 queries. users per second: 85672.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 135000/260134 queries. users per second: 85672.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 136000/260134 queries. users per second: 85658.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 136000/260134 queries. users per second: 85658.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 137000/260134 queries. users per second: 85666</pre>"
      ],
      "text/plain": [
       "recommendations finished on 137000/260134 queries. users per second: 85666"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 138000/260134 queries. users per second: 85691.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 138000/260134 queries. users per second: 85691.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 139000/260134 queries. users per second: 85679.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 139000/260134 queries. users per second: 85679.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 140000/260134 queries. users per second: 85707.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 140000/260134 queries. users per second: 85707.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 141000/260134 queries. users per second: 85711.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 141000/260134 queries. users per second: 85711.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 142000/260134 queries. users per second: 85680.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 142000/260134 queries. users per second: 85680.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 143000/260134 queries. users per second: 85709.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 143000/260134 queries. users per second: 85709.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 144000/260134 queries. users per second: 85728.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 144000/260134 queries. users per second: 85728.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 145000/260134 queries. users per second: 85703.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 145000/260134 queries. users per second: 85703.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 146000/260134 queries. users per second: 85730</pre>"
      ],
      "text/plain": [
       "recommendations finished on 146000/260134 queries. users per second: 85730"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 147000/260134 queries. users per second: 85753.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 147000/260134 queries. users per second: 85753.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 148000/260134 queries. users per second: 85746.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 148000/260134 queries. users per second: 85746.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 149000/260134 queries. users per second: 85751.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 149000/260134 queries. users per second: 85751.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 150000/260134 queries. users per second: 85772.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 150000/260134 queries. users per second: 85772.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 151000/260134 queries. users per second: 85730.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 151000/260134 queries. users per second: 85730.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 152000/260134 queries. users per second: 85753.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 152000/260134 queries. users per second: 85753.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 153000/260134 queries. users per second: 85723</pre>"
      ],
      "text/plain": [
       "recommendations finished on 153000/260134 queries. users per second: 85723"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 154000/260134 queries. users per second: 85706.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 154000/260134 queries. users per second: 85706.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 155000/260134 queries. users per second: 85726.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 155000/260134 queries. users per second: 85726.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 156000/260134 queries. users per second: 85728.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 156000/260134 queries. users per second: 85728.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 157000/260134 queries. users per second: 85699.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 157000/260134 queries. users per second: 85699.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 158000/260134 queries. users per second: 85686.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 158000/260134 queries. users per second: 85686.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 159000/260134 queries. users per second: 85702.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 159000/260134 queries. users per second: 85702.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 160000/260134 queries. users per second: 85701.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 160000/260134 queries. users per second: 85701.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 161000/260134 queries. users per second: 85707.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 161000/260134 queries. users per second: 85707.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 162000/260134 queries. users per second: 85708.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 162000/260134 queries. users per second: 85708.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 163000/260134 queries. users per second: 85715.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 163000/260134 queries. users per second: 85715.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 164000/260134 queries. users per second: 85730</pre>"
      ],
      "text/plain": [
       "recommendations finished on 164000/260134 queries. users per second: 85730"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 165000/260134 queries. users per second: 85714</pre>"
      ],
      "text/plain": [
       "recommendations finished on 165000/260134 queries. users per second: 85714"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 166000/260134 queries. users per second: 85718.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 166000/260134 queries. users per second: 85718.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 167000/260134 queries. users per second: 85739.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 167000/260134 queries. users per second: 85739.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 168000/260134 queries. users per second: 85748.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 168000/260134 queries. users per second: 85748.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 169000/260134 queries. users per second: 85757.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 169000/260134 queries. users per second: 85757.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 170000/260134 queries. users per second: 85778.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 170000/260134 queries. users per second: 85778.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 171000/260134 queries. users per second: 85787</pre>"
      ],
      "text/plain": [
       "recommendations finished on 171000/260134 queries. users per second: 85787"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 172000/260134 queries. users per second: 85788.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 172000/260134 queries. users per second: 85788.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 173000/260134 queries. users per second: 85790.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 173000/260134 queries. users per second: 85790.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 174000/260134 queries. users per second: 85799.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 174000/260134 queries. users per second: 85799.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 175000/260134 queries. users per second: 85802.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 175000/260134 queries. users per second: 85802.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 176000/260134 queries. users per second: 85813.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 176000/260134 queries. users per second: 85813.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 177000/260134 queries. users per second: 85804.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 177000/260134 queries. users per second: 85804.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 178000/260134 queries. users per second: 85797.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 178000/260134 queries. users per second: 85797.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 179000/260134 queries. users per second: 85814.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 179000/260134 queries. users per second: 85814.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 180000/260134 queries. users per second: 85818.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 180000/260134 queries. users per second: 85818.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 181000/260134 queries. users per second: 85823.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 181000/260134 queries. users per second: 85823.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 182000/260134 queries. users per second: 85834.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 182000/260134 queries. users per second: 85834.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 183000/260134 queries. users per second: 85839.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 183000/260134 queries. users per second: 85839.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 184000/260134 queries. users per second: 85845.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 184000/260134 queries. users per second: 85845.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 185000/260134 queries. users per second: 85842</pre>"
      ],
      "text/plain": [
       "recommendations finished on 185000/260134 queries. users per second: 85842"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 186000/260134 queries. users per second: 85831.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 186000/260134 queries. users per second: 85831.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 187000/260134 queries. users per second: 85841.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 187000/260134 queries. users per second: 85841.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 188000/260134 queries. users per second: 85863.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 188000/260134 queries. users per second: 85863.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 189000/260134 queries. users per second: 85844.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 189000/260134 queries. users per second: 85844.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 190000/260134 queries. users per second: 85845.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 190000/260134 queries. users per second: 85845.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 191000/260134 queries. users per second: 85853.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 191000/260134 queries. users per second: 85853.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 192000/260134 queries. users per second: 85826.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 192000/260134 queries. users per second: 85826.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 193000/260134 queries. users per second: 85829</pre>"
      ],
      "text/plain": [
       "recommendations finished on 193000/260134 queries. users per second: 85829"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 194000/260134 queries. users per second: 85824.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 194000/260134 queries. users per second: 85824.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 195000/260134 queries. users per second: 85804.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 195000/260134 queries. users per second: 85804.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 196000/260134 queries. users per second: 85809.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 196000/260134 queries. users per second: 85809.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 197000/260134 queries. users per second: 85818.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 197000/260134 queries. users per second: 85818.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 198000/260134 queries. users per second: 85806.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 198000/260134 queries. users per second: 85806.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 199000/260134 queries. users per second: 85815.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 199000/260134 queries. users per second: 85815.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 200000/260134 queries. users per second: 85823.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 200000/260134 queries. users per second: 85823.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 201000/260134 queries. users per second: 85799.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 201000/260134 queries. users per second: 85799.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 202000/260134 queries. users per second: 85798.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 202000/260134 queries. users per second: 85798.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 203000/260134 queries. users per second: 85811</pre>"
      ],
      "text/plain": [
       "recommendations finished on 203000/260134 queries. users per second: 85811"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 204000/260134 queries. users per second: 85809.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 204000/260134 queries. users per second: 85809.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 205000/260134 queries. users per second: 85825.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 205000/260134 queries. users per second: 85825.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 206000/260134 queries. users per second: 85823</pre>"
      ],
      "text/plain": [
       "recommendations finished on 206000/260134 queries. users per second: 85823"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 207000/260134 queries. users per second: 85799.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 207000/260134 queries. users per second: 85799.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 208000/260134 queries. users per second: 85810.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 208000/260134 queries. users per second: 85810.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 209000/260134 queries. users per second: 85820.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 209000/260134 queries. users per second: 85820.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 210000/260134 queries. users per second: 85814</pre>"
      ],
      "text/plain": [
       "recommendations finished on 210000/260134 queries. users per second: 85814"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 211000/260134 queries. users per second: 85827.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 211000/260134 queries. users per second: 85827.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 212000/260134 queries. users per second: 85831.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 212000/260134 queries. users per second: 85831.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 213000/260134 queries. users per second: 85806.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 213000/260134 queries. users per second: 85806.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 214000/260134 queries. users per second: 85791</pre>"
      ],
      "text/plain": [
       "recommendations finished on 214000/260134 queries. users per second: 85791"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 215000/260134 queries. users per second: 85808.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 215000/260134 queries. users per second: 85808.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 216000/260134 queries. users per second: 85807.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 216000/260134 queries. users per second: 85807.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 217000/260134 queries. users per second: 85818.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 217000/260134 queries. users per second: 85818.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 218000/260134 queries. users per second: 85837.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 218000/260134 queries. users per second: 85837.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 219000/260134 queries. users per second: 85828.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 219000/260134 queries. users per second: 85828.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 220000/260134 queries. users per second: 85830.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 220000/260134 queries. users per second: 85830.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 221000/260134 queries. users per second: 85847.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 221000/260134 queries. users per second: 85847.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 222000/260134 queries. users per second: 85835.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 222000/260134 queries. users per second: 85835.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 223000/260134 queries. users per second: 85847.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 223000/260134 queries. users per second: 85847.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 224000/260134 queries. users per second: 85856.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 224000/260134 queries. users per second: 85856.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 225000/260134 queries. users per second: 85835.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 225000/260134 queries. users per second: 85835.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 226000/260134 queries. users per second: 85849.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 226000/260134 queries. users per second: 85849.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 227000/260134 queries. users per second: 85862.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 227000/260134 queries. users per second: 85862.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 228000/260134 queries. users per second: 85811.4</pre>"
      ],
      "text/plain": [
       "recommendations finished on 228000/260134 queries. users per second: 85811.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 229000/260134 queries. users per second: 85801</pre>"
      ],
      "text/plain": [
       "recommendations finished on 229000/260134 queries. users per second: 85801"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 230000/260134 queries. users per second: 85796.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 230000/260134 queries. users per second: 85796.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 231000/260134 queries. users per second: 85803.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 231000/260134 queries. users per second: 85803.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 232000/260134 queries. users per second: 85810.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 232000/260134 queries. users per second: 85810.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 233000/260134 queries. users per second: 85806.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 233000/260134 queries. users per second: 85806.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 234000/260134 queries. users per second: 85811.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 234000/260134 queries. users per second: 85811.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 235000/260134 queries. users per second: 85814.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 235000/260134 queries. users per second: 85814.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 236000/260134 queries. users per second: 85794.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 236000/260134 queries. users per second: 85794.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 237000/260134 queries. users per second: 85774.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 237000/260134 queries. users per second: 85774.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 238000/260134 queries. users per second: 85771.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 238000/260134 queries. users per second: 85771.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 239000/260134 queries. users per second: 85752.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 239000/260134 queries. users per second: 85752.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 240000/260134 queries. users per second: 85746.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 240000/260134 queries. users per second: 85746.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 241000/260134 queries. users per second: 85741.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 241000/260134 queries. users per second: 85741.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 242000/260134 queries. users per second: 85705.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 242000/260134 queries. users per second: 85705.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 243000/260134 queries. users per second: 85683.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 243000/260134 queries. users per second: 85683.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 244000/260134 queries. users per second: 85657.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 244000/260134 queries. users per second: 85657.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 245000/260134 queries. users per second: 85626.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 245000/260134 queries. users per second: 85626.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 246000/260134 queries. users per second: 85606.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 246000/260134 queries. users per second: 85606.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 247000/260134 queries. users per second: 85577.5</pre>"
      ],
      "text/plain": [
       "recommendations finished on 247000/260134 queries. users per second: 85577.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 248000/260134 queries. users per second: 85558.8</pre>"
      ],
      "text/plain": [
       "recommendations finished on 248000/260134 queries. users per second: 85558.8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 249000/260134 queries. users per second: 85536.7</pre>"
      ],
      "text/plain": [
       "recommendations finished on 249000/260134 queries. users per second: 85536.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 250000/260134 queries. users per second: 85494.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 250000/260134 queries. users per second: 85494.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 251000/260134 queries. users per second: 85437.6</pre>"
      ],
      "text/plain": [
       "recommendations finished on 251000/260134 queries. users per second: 85437.6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 252000/260134 queries. users per second: 85357.1</pre>"
      ],
      "text/plain": [
       "recommendations finished on 252000/260134 queries. users per second: 85357.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 253000/260134 queries. users per second: 85227.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 253000/260134 queries. users per second: 85227.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 254000/260134 queries. users per second: 85078</pre>"
      ],
      "text/plain": [
       "recommendations finished on 254000/260134 queries. users per second: 85078"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 255000/260134 queries. users per second: 84917.3</pre>"
      ],
      "text/plain": [
       "recommendations finished on 255000/260134 queries. users per second: 84917.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 256000/260134 queries. users per second: 84638.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 256000/260134 queries. users per second: 84638.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 257000/260134 queries. users per second: 84353.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 257000/260134 queries. users per second: 84353.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 258000/260134 queries. users per second: 83834.9</pre>"
      ],
      "text/plain": [
       "recommendations finished on 258000/260134 queries. users per second: 83834.9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 259000/260134 queries. users per second: 83248</pre>"
      ],
      "text/plain": [
       "recommendations finished on 259000/260134 queries. users per second: 83248"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre>recommendations finished on 260000/260134 queries. users per second: 81856.2</pre>"
      ],
      "text/plain": [
       "recommendations finished on 260000/260134 queries. users per second: 81856.2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "----------------------------------------------------\n",
      "Cell Processing Time\n",
      "CPU times: user 23min 26s, sys: 25.9 s, total: 23min 52s\n",
      "Wall time: 2min 41s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "df = ratings.merge(links_small, how='left', on='movieId')\n",
    "df = df.merge(movies, how='left', left_on='tmdbId', right_on='id')\n",
    "\n",
    "#ratings_small_plus = ratings_small.merge(links_small, how='left', on='movieId')\n",
    "#ratings_small_plus = ratings_small_plus.merge(movies, how='left', left_on='tmdbId', right_on='id')\n",
    "\n",
    "\n",
    "df = df[['userId','movieId','rating','genre_dict','belongs_to_collection']]\n",
    "df = df[~df['genre_dict'].isnull()]\n",
    "df = df[~df['belongs_to_collection'].isnull()]\n",
    "\n",
    "data = tc.SFrame(data=df)\n",
    "\n",
    "model = tc.recommender.create(data, user_id=\"userId\", item_id=\"movieId\", target=\"rating\")\n",
    "results = model.recommend(users=None, k=5)\n",
    "model.save(\"my_model\")\n",
    "\n",
    "print(timebreak)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\"><table frame=\"box\" rules=\"cols\">\n",
       "    <tr>\n",
       "        <th style=\"padding-left: 1em; padding-right: 1em; text-align: center\">userId</th>\n",
       "        <th style=\"padding-left: 1em; padding-right: 1em; text-align: center\">movieId</th>\n",
       "        <th style=\"padding-left: 1em; padding-right: 1em; text-align: center\">score</th>\n",
       "        <th style=\"padding-left: 1em; padding-right: 1em; text-align: center\">rank</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">1</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">2571</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">4.575253279193512</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">1</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">1</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">4.31492284057962</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">1</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">593</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">4.281789214595428</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">1</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">541</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">4.267735262646547</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">1</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">49272</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">4.236313999875656</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">2</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">2571</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">4.8047915820621165</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">2</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">593</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">4.526352000667921</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">2</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">1270</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">4.247524631454817</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">2</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">589</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">4.206580576732031</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">2</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">329</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">4.116424364282957</td>\n",
       "        <td style=\"padding-left: 1em; padding-right: 1em; text-align: center; vertical-align: top\">5</td>\n",
       "    </tr>\n",
       "</table>\n",
       "[1300670 rows x 4 columns]<br/>Note: Only the head of the SFrame is printed.<br/>You can use print_rows(num_rows=m, num_columns=n) to print more rows and columns.\n",
       "</div>"
      ],
      "text/plain": [
       "Columns:\n",
       "\tuserId\tint\n",
       "\tmovieId\tint\n",
       "\tscore\tfloat\n",
       "\trank\tint\n",
       "\n",
       "Rows: 1300670\n",
       "\n",
       "Data:\n",
       "+--------+---------+--------------------+------+\n",
       "| userId | movieId |       score        | rank |\n",
       "+--------+---------+--------------------+------+\n",
       "|   1    |   2571  | 4.575253279193512  |  1   |\n",
       "|   1    |    1    |  4.31492284057962  |  2   |\n",
       "|   1    |   593   | 4.281789214595428  |  3   |\n",
       "|   1    |   541   | 4.267735262646547  |  4   |\n",
       "|   1    |  49272  | 4.236313999875656  |  5   |\n",
       "|   2    |   2571  | 4.8047915820621165 |  1   |\n",
       "|   2    |   593   | 4.526352000667921  |  2   |\n",
       "|   2    |   1270  | 4.247524631454817  |  3   |\n",
       "|   2    |   589   | 4.206580576732031  |  4   |\n",
       "|   2    |   329   | 4.116424364282957  |  5   |\n",
       "+--------+---------+--------------------+------+\n",
       "[1300670 rows x 4 columns]\n",
       "Note: Only the head of the SFrame is printed.\n",
       "You can use print_rows(num_rows=m, num_columns=n) to print more rows and columns."
      ]
     },
     "execution_count": 234,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>Preparing data set.</pre>"
      ],
      "text/plain": [
       "Preparing data set."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "ToolkitError",
     "evalue": "Dictionary value for key 'Jim Lucas' in column 'directors_dict' is not numeric.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
      "\u001b[0;32m~/anaconda3/envs/DS7331/lib/python3.7/site-packages/turicreate/extensions.py\u001b[0m in \u001b[0;36m__run_class_function\u001b[0;34m(self, fnname, args, kwargs)\u001b[0m\n\u001b[1;32m    289\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 290\u001b[0;31m             \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tkclass\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfnname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margument_dict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    291\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mRuntimeError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mcy_model.pyx\u001b[0m in \u001b[0;36mturicreate._cython.cy_model.UnityModel.call_function\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mcy_model.pyx\u001b[0m in \u001b[0;36mturicreate._cython.cy_model.UnityModel.call_function\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mRuntimeError\u001b[0m: Dictionary value for key 'Jim Lucas' in column 'directors_dict' is not numeric.",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mToolkitError\u001b[0m                              Traceback (most recent call last)",
      "\u001b[0;32m<timed exec>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/DS7331/lib/python3.7/site-packages/turicreate/toolkits/recommender/util.py\u001b[0m in \u001b[0;36m_create\u001b[0;34m(observation_data, user_id, item_id, target, user_data, item_data, ranking, verbose)\u001b[0m\n\u001b[1;32m    178\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_turicreate\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecommender\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfactorization_recommender\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcreate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mopts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    179\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mmethod\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"ranking_factorization_recommender\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 180\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_turicreate\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecommender\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mranking_factorization_recommender\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcreate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mopts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    181\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Provided method not recognized.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/DS7331/lib/python3.7/site-packages/turicreate/toolkits/recommender/ranking_factorization_recommender.py\u001b[0m in \u001b[0;36mcreate\u001b[0;34m(observation_data, user_id, item_id, target, user_data, item_data, num_factors, regularization, linear_regularization, side_data_factorization, ranking_regularization, unobserved_rating_value, num_sampled_negative_examples, max_iterations, sgd_step_size, random_seed, binary_target, solver, verbose, **kwargs)\u001b[0m\n\u001b[1;32m    275\u001b[0m     \u001b[0mextra_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m\"nearest_items\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0m_turicreate\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    276\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mQuietProgress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 277\u001b[0;31m         \u001b[0mmodel_proxy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobservation_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muser_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mitem_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mopts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextra_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    278\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    279\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mRankingFactorizationRecommender\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_proxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/DS7331/lib/python3.7/site-packages/turicreate/extensions.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    303\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_functions\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    304\u001b[0m             \u001b[0;31m# is it a function?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 305\u001b[0;31m             \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__run_class_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    306\u001b[0m             ret.__doc__ = (\n\u001b[1;32m    307\u001b[0m                 \u001b[0;34m\"Name: \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mname\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m\"\\nParameters: \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_functions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m\"\\n\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/DS7331/lib/python3.7/site-packages/turicreate/extensions.py\u001b[0m in \u001b[0;36m__run_class_function\u001b[0;34m(self, fnname, args, kwargs)\u001b[0m\n\u001b[1;32m    291\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mRuntimeError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    292\u001b[0m             \u001b[0;31m# Expose C++ exceptions using ToolkitError.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 293\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0m_ToolkitError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    294\u001b[0m         \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_wrap_function_return\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mret\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    295\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mret\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mToolkitError\u001b[0m: Dictionary value for key 'Jim Lucas' in column 'directors_dict' is not numeric."
     ]
    }
   ],
   "source": [
    "%%time\n",
    "df = ratings_small.merge(links_small, how='left', on='movieId')\n",
    "df = df.merge(movies, how='left', left_on='tmdbId', right_on='id')\n",
    "\n",
    "#ratings_small_plus = ratings_small.merge(links_small, how='left', on='movieId')\n",
    "#ratings_small_plus = ratings_small_plus.merge(movies, how='left', left_on='tmdbId', right_on='id')\n",
    "\n",
    "\n",
    "df = df[['userId','movieId','rating','genre_dict','belongs_to_collection','directors_dict']]\n",
    "df = df[~df['genre_dict'].isnull()]\n",
    "df = df[~df['belongs_to_collection'].isnull()]\n",
    "df = df[~df['directors_dict'].isnull()]\n",
    "\n",
    "data = tc.SFrame(data=df)\n",
    "\n",
    "model = tc.recommender.create(data, user_id=\"userId\", item_id=\"movieId\", target=\"rating\")\n",
    "results = model.recommend(users=None, k=5)\n",
    "model.save(\"my_model\")\n",
    "\n",
    "print(timebreak)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modeling and Evaluation 2\n",
    "\n",
    "Evaluate and Compare"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modeling and Evaluation 3\n",
    "\n",
    "Visualize Results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modeling and Evaluation 4\n",
    "\n",
    "Summarize the Ramifications"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Deployment\n",
    "\n",
    "Be critical of your performance and tell the reader how you current model might be usable by other parties. Did you achieve your goals? If not, can you reign in the utility of your modeling? How useful is your model for interested parties (i.e., the companies or organizations that might want to use it)? How would your deploy your model for interested parties? What other data should be collected? How often would the model need to be updated, etc.?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exceptional Work\n",
    "\n",
    "You have free reign to provide additional analyses or combine analyses."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# References"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Dataset obtained from kaggle : <a href=\"https://www.kaggle.com/rounakbanik/the-movies-dataset\"> click here </a>\n",
    "2. Apple (turicreate) <a href=\"https://apple.github.io/turicreate/docs/userguide/recommender/\"> article </a> on Recommender. \n",
    "3. Recommendor Systems instruction by Dr. Eric Larson: <a href=\"https://www.youtube.com/watch?v=I-xPNMCqW2o\"> video </a>\n",
    "4. Movie Recommendation System with Collaborative Filteringn by Code Heroku: <a href=\"https://www.youtube.com/watch?v=3ecNC-So0r4&t=903s\"> video </a>\n",
    "5. An <a href=\"https://tryolabs.com/blog/introduction-to-recommender-systems/\"> </a> article on Recommmender system \n",
    "6. A book <i> \"Practical recommender System\" by Kim Falk </i>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.7.4 64-bit ('base': conda)",
   "language": "python",
   "name": "python37464bitbasecondaea83915b4e5942dba7e70c8d283c9269"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
